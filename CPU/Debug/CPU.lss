
CPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000487  00800100  00800100  00001376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001539  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b48  00000000  00000000  00002a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b12  00000000  00000000  00003569  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  0000407c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005e1  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ca  00000000  00000000  00004839  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004f03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
       c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
      68:	bf 05       	cpc	r27, r15
      6a:	09 02       	muls	r16, r25
      6c:	21 02       	muls	r18, r17
      6e:	3f 02       	muls	r19, r31
      70:	7c 02       	muls	r23, r28
      72:	a0 02       	muls	r26, r16
      74:	bf 02       	muls	r27, r31
      76:	e3 02       	muls	r30, r19
      78:	f3 02       	muls	r31, r19
      7a:	0b 03       	fmul	r16, r19
      7c:	23 03       	mulsu	r18, r19
      7e:	45 03       	mulsu	r20, r21
      80:	67 03       	mulsu	r22, r23
      82:	89 03       	fmulsu	r16, r17
      84:	b0 03       	fmuls	r19, r16
      86:	d7 03       	fmuls	r21, r23
      88:	fe 03       	fmulsu	r23, r22
      8a:	20 04       	cpc	r2, r0
      8c:	42 04       	cpc	r4, r2
      8e:	69 04       	cpc	r6, r9
      90:	90 04       	cpc	r9, r0
      92:	ae 04       	cpc	r10, r14
      94:	cc 04       	cpc	r12, r12
      96:	ea 04       	cpc	r14, r10
      98:	31 05       	cpc	r19, r1
      9a:	43 05       	cpc	r20, r3
      9c:	0d 05       	cpc	r16, r13
      9e:	1e 05       	cpc	r17, r14
      a0:	25 05       	cpc	r18, r5
      a2:	56 05       	cpc	r21, r6
      a4:	5f 05       	cpc	r21, r15
      a6:	6c 05       	cpc	r22, r12
      a8:	79 05       	cpc	r23, r9
      aa:	86 05       	cpc	r24, r6
      ac:	95 05       	cpc	r25, r5
      ae:	a4 05       	cpc	r26, r4
      b0:	b1 05       	cpc	r27, r1
      b2:	b7 05       	cpc	r27, r7

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a7 38       	cpi	r26, 0x87	; 135
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 9c 06 	call	0xd38	; 0xd38 <main>
      d4:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_exit>

000000d8 <__bad_interrupt>:
      d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <alu>:

uint32_t alu(const uint16_t op,
			 const uint32_t a,
			 const uint32_t b,
			 uint8_t sr)
{
      dc:	8f 92       	push	r8
      de:	9f 92       	push	r9
      e0:	af 92       	push	r10
      e2:	bf 92       	push	r11
      e4:	cf 92       	push	r12
      e6:	df 92       	push	r13
      e8:	ef 92       	push	r14
      ea:	ff 92       	push	r15
      ec:	0f 93       	push	r16
      ee:	1f 93       	push	r17
	uint64_t result = 0x00;
	sr &= ~((1 << S) | (1 << N) | (1 << Z) | (1 << V) | (1 << C));

	switch(op)
      f0:	8f 30       	cpi	r24, 0x0F	; 15
      f2:	91 05       	cpc	r25, r1
      f4:	b9 f0       	breq	.+46     	; 0x124 <alu+0x48>
      f6:	30 f4       	brcc	.+12     	; 0x104 <alu+0x28>
      f8:	8d 30       	cpi	r24, 0x0D	; 13
      fa:	91 05       	cpc	r25, r1
      fc:	49 f0       	breq	.+18     	; 0x110 <alu+0x34>
      fe:	0e 97       	sbiw	r24, 0x0e	; 14
     100:	61 f0       	breq	.+24     	; 0x11a <alu+0x3e>
     102:	39 c0       	rjmp	.+114    	; 0x176 <alu+0x9a>
     104:	82 31       	cpi	r24, 0x12	; 18
     106:	91 05       	cpc	r25, r1
     108:	91 f0       	breq	.+36     	; 0x12e <alu+0x52>
     10a:	43 97       	sbiw	r24, 0x13	; 19
     10c:	a9 f0       	breq	.+42     	; 0x138 <alu+0x5c>
     10e:	33 c0       	rjmp	.+102    	; 0x176 <alu+0x9a>
	{
		case OR:
		{
			result = a | b;
     110:	04 2b       	or	r16, r20
     112:	15 2b       	or	r17, r21
     114:	26 2b       	or	r18, r22
     116:	37 2b       	or	r19, r23
			break;
     118:	32 c0       	rjmp	.+100    	; 0x17e <alu+0xa2>
		}
		case AND:
		{
			result = a & b;
     11a:	04 23       	and	r16, r20
     11c:	15 23       	and	r17, r21
     11e:	26 23       	and	r18, r22
     120:	37 23       	and	r19, r23
			break;
     122:	2d c0       	rjmp	.+90     	; 0x17e <alu+0xa2>
		}
		case XOR:
		{
			result = a ^ b;
     124:	04 27       	eor	r16, r20
     126:	15 27       	eor	r17, r21
     128:	26 27       	eor	r18, r22
     12a:	37 27       	eor	r19, r23
			break;
     12c:	28 c0       	rjmp	.+80     	; 0x17e <alu+0xa2>
		}
		case ADD:
		{
			result = a + b;
     12e:	04 0f       	add	r16, r20
     130:	15 1f       	adc	r17, r21
     132:	26 1f       	adc	r18, r22
     134:	37 1f       	adc	r19, r23
     136:	23 c0       	rjmp	.+70     	; 0x17e <alu+0xa2>
     138:	6a 01       	movw	r12, r20
     13a:	7b 01       	movw	r14, r22

			break;
		}
		case SUB:
		{
			result = a + (pow(2, 32) - b);
     13c:	c9 01       	movw	r24, r18
     13e:	b8 01       	movw	r22, r16
     140:	0e 94 bd 08 	call	0x117a	; 0x117a <__floatunsisf>
     144:	9b 01       	movw	r18, r22
     146:	ac 01       	movw	r20, r24
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	70 e0       	ldi	r23, 0x00	; 0
     14c:	80 e8       	ldi	r24, 0x80	; 128
     14e:	9f e4       	ldi	r25, 0x4F	; 79
     150:	0e 94 14 08 	call	0x1028	; 0x1028 <__subsf3>
     154:	4b 01       	movw	r8, r22
     156:	5c 01       	movw	r10, r24
     158:	c7 01       	movw	r24, r14
     15a:	b6 01       	movw	r22, r12
     15c:	0e 94 bd 08 	call	0x117a	; 0x117a <__floatunsisf>
     160:	a5 01       	movw	r20, r10
     162:	94 01       	movw	r18, r8
     164:	0e 94 15 08 	call	0x102a	; 0x102a <__addsf3>
     168:	0e 94 86 08 	call	0x110c	; 0x110c <__fixunssfdi>
     16c:	02 2f       	mov	r16, r18
     16e:	13 2f       	mov	r17, r19
     170:	24 2f       	mov	r18, r20
     172:	35 2f       	mov	r19, r21
     174:	04 c0       	rjmp	.+8      	; 0x17e <alu+0xa2>
uint32_t alu(const uint16_t op,
			 const uint32_t a,
			 const uint32_t b,
			 uint8_t sr)
{
	uint64_t result = 0x00;
     176:	00 e0       	ldi	r16, 0x00	; 0
     178:	10 e0       	ldi	r17, 0x00	; 0
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
	if (read(result, 31))           set(sr, N);
	if ((uint32_t)(result) == 0)      set(sr, Z);
	if (read(sr, N) != read(sr, V)) set(sr, S);

	return result;
     17e:	c9 01       	movw	r24, r18
     180:	b8 01       	movw	r22, r16
     182:	1f 91       	pop	r17
     184:	0f 91       	pop	r16
     186:	ff 90       	pop	r15
     188:	ef 90       	pop	r14
     18a:	df 90       	pop	r13
     18c:	cf 90       	pop	r12
     18e:	bf 90       	pop	r11
     190:	af 90       	pop	r10
     192:	9f 90       	pop	r9
     194:	8f 90       	pop	r8
     196:	08 95       	ret

00000198 <io_reset>:
   
}

static void io_reset(void)
{
	DDRB = 0x00;
     198:	14 b8       	out	0x04, r1	; 4
	DDRC = 0x00;
     19a:	17 b8       	out	0x07, r1	; 7
	DDRD = 0x00;
     19c:	1a b8       	out	0x0a, r1	; 10

	PORTB = 0x00;
     19e:	15 b8       	out	0x05, r1	; 5
	PORTC = 0x00;
     1a0:	18 b8       	out	0x08, r1	; 8
	PORTD = 0x00;
     1a2:	1b b8       	out	0x0b, r1	; 11
     1a4:	08 95       	ret

000001a6 <io_update>:
	
	return;
}

static void io_update(void)
{
     1a6:	8f 92       	push	r8
     1a8:	9f 92       	push	r9
     1aa:	af 92       	push	r10
     1ac:	bf 92       	push	r11
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
	const uint32_t ddra = data_memory_read(DDRA);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	cb 01       	movw	r24, r22
     1bc:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     1c0:	4c 01       	movw	r8, r24
     1c2:	99 0f       	add	r25, r25
     1c4:	aa 08       	sbc	r10, r10
     1c6:	bb 08       	sbc	r11, r11
	const uint32_t porta = data_memory_read(PORTA);
     1c8:	61 e0       	ldi	r22, 0x01	; 1
     1ca:	70 e0       	ldi	r23, 0x00	; 0
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     1d4:	6c 01       	movw	r12, r24
     1d6:	99 0f       	add	r25, r25
     1d8:	ee 08       	sbc	r14, r14
     1da:	ff 08       	sbc	r15, r15
	const uint32_t pina = (uint32_t)(((uint32_t)PINC << 16) | ((uint16_t)PINB << 8) | PIND);
     1dc:	26 b1       	in	r18, 0x06	; 6
     1de:	82 2f       	mov	r24, r18
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b0 e0       	ldi	r27, 0x00	; 0
     1e6:	dc 01       	movw	r26, r24
     1e8:	99 27       	eor	r25, r25
     1ea:	88 27       	eor	r24, r24
     1ec:	23 b1       	in	r18, 0x03	; 3
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	32 2f       	mov	r19, r18
     1f2:	22 27       	eor	r18, r18
     1f4:	a9 01       	movw	r20, r18
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	70 e0       	ldi	r23, 0x00	; 0
     1fa:	48 2b       	or	r20, r24
     1fc:	59 2b       	or	r21, r25
     1fe:	6a 2b       	or	r22, r26
     200:	7b 2b       	or	r23, r27
     202:	89 b1       	in	r24, 0x09	; 9
     204:	9a 01       	movw	r18, r20
     206:	ab 01       	movw	r20, r22
     208:	28 2b       	or	r18, r24
	
	data_memory_write(PINA, pina);
     20a:	62 e0       	ldi	r22, 0x02	; 2
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	80 e0       	ldi	r24, 0x00	; 0
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
	
	DDRB = (uint8_t)(ddra >> 8);
     216:	bb 27       	eor	r27, r27
     218:	ab 2d       	mov	r26, r11
     21a:	9a 2d       	mov	r25, r10
     21c:	89 2d       	mov	r24, r9
     21e:	84 b9       	out	0x04, r24	; 4
	DDRC = (uint8_t)(ddra >> 16);
     220:	c5 01       	movw	r24, r10
     222:	aa 27       	eor	r26, r26
     224:	bb 27       	eor	r27, r27
     226:	87 b9       	out	0x07, r24	; 7
	DDRD = (uint8_t)(ddra);
     228:	8a b8       	out	0x0a, r8	; 10

	PORTB = (uint8_t)(porta >> 8);
     22a:	bb 27       	eor	r27, r27
     22c:	af 2d       	mov	r26, r15
     22e:	9e 2d       	mov	r25, r14
     230:	8d 2d       	mov	r24, r13
     232:	85 b9       	out	0x05, r24	; 5
	PORTC = (uint8_t)(porta >> 16);
     234:	c7 01       	movw	r24, r14
     236:	aa 27       	eor	r26, r26
     238:	bb 27       	eor	r27, r27
     23a:	88 b9       	out	0x08, r24	; 8
	PORTD = (uint8_t)(porta);
     23c:	cb b8       	out	0x0b, r12	; 11
	
	return;
}
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	bf 90       	pop	r11
     248:	af 90       	pop	r10
     24a:	9f 90       	pop	r9
     24c:	8f 90       	pop	r8
     24e:	08 95       	ret

00000250 <control_unit_reset>:
static volatile uint32_t pina_last_value;
static uint32_t reg[CPU_REGISTER_ADDRESS_WIDTH];

void control_unit_reset(void)
{
	pc = 0x00;
     250:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <pc+0x1>
     254:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <pc>
	ir = 0x00;
     258:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <ir>
     25c:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <ir+0x1>
     260:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <ir+0x2>
     264:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <ir+0x3>
     268:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <ir+0x4>
     26c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <ir+0x5>
     270:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <ir+0x6>
     274:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <ir+0x7>
	sr = 0x00;
     278:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <sr>

	op_code = 0x00;
     27c:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <op_code+0x1>
     280:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <op_code>
	op1 = 0x00;
     284:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <op1+0x1>
     288:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <op1>
	op2 = 0x00;
     28c:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <op2>
     290:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <op2+0x1>
     294:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <op2+0x2>
     298:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <op2+0x3>

	current_state = CPU_STATE_FETCH;
     29c:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <current_state>
     2a0:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <current_state+0x1>
     2a4:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <current_state+0x2>
     2a8:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <current_state+0x3>
	pina_last_value = 0x00;
     2ac:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <pina_last_value>
     2b0:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <pina_last_value+0x1>
     2b4:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <pina_last_value+0x2>
     2b8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <pina_last_value+0x3>
	return;
}

static inline void cpu_registers_clear(void)
{
	for (uint8_t i = 0; i <  CPU_REGISTER_ADDRESS_WIDTH; ++i)
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	09 c0       	rjmp	.+18     	; 0x2d2 <control_unit_reset+0x82>
	{
		reg[0] = 0;
     2c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     2c4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2cc:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	return;
}

static inline void cpu_registers_clear(void)
{
	for (uint8_t i = 0; i <  CPU_REGISTER_ADDRESS_WIDTH; ++i)
     2d0:	8f 5f       	subi	r24, 0xFF	; 255
     2d2:	80 32       	cpi	r24, 0x20	; 32
     2d4:	a8 f3       	brcs	.-22     	; 0x2c0 <control_unit_reset+0x70>

	current_state = CPU_STATE_FETCH;
	pina_last_value = 0x00;

	cpu_registers_clear();
	program_memory_write();
     2d6:	0e 94 a1 06 	call	0xd42	; 0xd42 <program_memory_write>
	data_memory_reset();
     2da:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <data_memory_reset>
	stack_reset();
     2de:	0e 94 93 07 	call	0xf26	; 0xf26 <stack_reset>
	io_reset();
     2e2:	0e 94 cc 00 	call	0x198	; 0x198 <io_reset>
     2e6:	08 95       	ret

000002e8 <control_unit_run>:
	return;
}

void control_unit_run(void)
{
     2e8:	cf 92       	push	r12
     2ea:	df 92       	push	r13
     2ec:	ef 92       	push	r14
     2ee:	ff 92       	push	r15
     2f0:	0f 93       	push	r16
     2f2:	1f 93       	push	r17
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
	switch(current_state)
     2f8:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <current_state>
     2fc:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <current_state+0x1>
     300:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <current_state+0x2>
     304:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <current_state+0x3>
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	91 05       	cpc	r25, r1
     30c:	a1 05       	cpc	r26, r1
     30e:	b1 05       	cpc	r27, r1
     310:	89 f1       	breq	.+98     	; 0x374 <control_unit_run+0x8c>
     312:	30 f0       	brcs	.+12     	; 0x320 <control_unit_run+0x38>
     314:	02 97       	sbiw	r24, 0x02	; 2
     316:	a1 05       	cpc	r26, r1
     318:	b1 05       	cpc	r27, r1
     31a:	09 f4       	brne	.+2      	; 0x31e <control_unit_run+0x36>
     31c:	6e c0       	rjmp	.+220    	; 0x3fa <control_unit_run+0x112>
     31e:	6d c4       	rjmp	.+2266   	; 0xbfa <__stack+0x2fb>
	{
	   case CPU_STATE_FETCH:
	   {
		  ir = program_memory_read(pc++);
     320:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <pc>
     324:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <pc+0x1>
     328:	9c 01       	movw	r18, r24
     32a:	2f 5f       	subi	r18, 0xFF	; 255
     32c:	3f 4f       	sbci	r19, 0xFF	; 255
     32e:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <pc+0x1>
     332:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <pc>
     336:	0e 94 75 07 	call	0xeea	; 0xeea <program_memory_read>
     33a:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <ir>
     33e:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <ir+0x1>
     342:	40 93 93 01 	sts	0x0193, r20	; 0x800193 <ir+0x2>
     346:	50 93 94 01 	sts	0x0194, r21	; 0x800194 <ir+0x3>
     34a:	60 93 95 01 	sts	0x0195, r22	; 0x800195 <ir+0x4>
     34e:	70 93 96 01 	sts	0x0196, r23	; 0x800196 <ir+0x5>
     352:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <ir+0x6>
     356:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <ir+0x7>
		  current_state = CPU_STATE_DECODE;
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	a0 e0       	ldi	r26, 0x00	; 0
     360:	b0 e0       	ldi	r27, 0x00	; 0
     362:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <current_state>
     366:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <current_state+0x1>
     36a:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <current_state+0x2>
     36e:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <current_state+0x3>
		  break;
     372:	45 c4       	rjmp	.+2186   	; 0xbfe <__stack+0x2ff>
	   }	
	   case CPU_STATE_DECODE:
	   {
		   op_code = (uint16_t)(ir >> 48);
     374:	b0 91 91 01 	lds	r27, 0x0191	; 0x800191 <ir>
     378:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <ir+0x1>
     37c:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <ir+0x2>
     380:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <ir+0x3>
     384:	f0 90 95 01 	lds	r15, 0x0195	; 0x800195 <ir+0x4>
     388:	10 91 96 01 	lds	r17, 0x0196	; 0x800196 <ir+0x5>
     38c:	d0 91 97 01 	lds	r29, 0x0197	; 0x800197 <ir+0x6>
     390:	c0 91 98 01 	lds	r28, 0x0198	; 0x800198 <ir+0x7>
     394:	2b 2f       	mov	r18, r27
     396:	3a 2f       	mov	r19, r26
     398:	4f 2f       	mov	r20, r31
     39a:	5e 2f       	mov	r21, r30
     39c:	6f 2d       	mov	r22, r15
     39e:	71 2f       	mov	r23, r17
     3a0:	8d 2f       	mov	r24, r29
     3a2:	9c 2f       	mov	r25, r28
     3a4:	00 e3       	ldi	r16, 0x30	; 48
     3a6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__lshrdi3>
     3aa:	20 93 8e 01 	sts	0x018E, r18	; 0x80018e <op_code>
     3ae:	30 93 8f 01 	sts	0x018F, r19	; 0x80018f <op_code+0x1>
		   op1     = (uint16_t)(ir >> 32);
     3b2:	2b 2f       	mov	r18, r27
     3b4:	3a 2f       	mov	r19, r26
     3b6:	4f 2f       	mov	r20, r31
     3b8:	5e 2f       	mov	r21, r30
     3ba:	6f 2d       	mov	r22, r15
     3bc:	71 2f       	mov	r23, r17
     3be:	8d 2f       	mov	r24, r29
     3c0:	9c 2f       	mov	r25, r28
     3c2:	00 e2       	ldi	r16, 0x20	; 32
     3c4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <__lshrdi3>
     3c8:	20 93 8c 01 	sts	0x018C, r18	; 0x80018c <op1>
     3cc:	30 93 8d 01 	sts	0x018D, r19	; 0x80018d <op1+0x1>
		   op2     = (uint32_t)(ir);
     3d0:	b0 93 88 01 	sts	0x0188, r27	; 0x800188 <op2>
     3d4:	a0 93 89 01 	sts	0x0189, r26	; 0x800189 <op2+0x1>
     3d8:	f0 93 8a 01 	sts	0x018A, r31	; 0x80018a <op2+0x2>
     3dc:	e0 93 8b 01 	sts	0x018B, r30	; 0x80018b <op2+0x3>
		   current_state = CPU_STATE_EXECUTE;
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	a0 e0       	ldi	r26, 0x00	; 0
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <current_state>
     3ec:	90 93 85 01 	sts	0x0185, r25	; 0x800185 <current_state+0x1>
     3f0:	a0 93 86 01 	sts	0x0186, r26	; 0x800186 <current_state+0x2>
     3f4:	b0 93 87 01 	sts	0x0187, r27	; 0x800187 <current_state+0x3>
		   break;
     3f8:	02 c4       	rjmp	.+2052   	; 0xbfe <__stack+0x2ff>
	   }
	   case CPU_STATE_EXECUTE:
	   {
		   switch (op_code)
     3fa:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <op_code>
     3fe:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <op_code+0x1>
     402:	e6 32       	cpi	r30, 0x26	; 38
     404:	f1 05       	cpc	r31, r1
     406:	08 f0       	brcs	.+2      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     408:	b8 c3       	rjmp	.+1904   	; 0xb7a <__stack+0x27b>
     40a:	ec 5c       	subi	r30, 0xCC	; 204
     40c:	ff 4f       	sbci	r31, 0xFF	; 255
     40e:	0c 94 5b 09 	jmp	0x12b6	; 0x12b6 <__tablejump2__>
			   {
				   break;
			   }
			   case LDI:
			   {
				   reg[(uint8_t)(op1)] = op2;
     412:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     416:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     41a:	ff 27       	eor	r31, r31
     41c:	ee 0f       	add	r30, r30
     41e:	ff 1f       	adc	r31, r31
     420:	ee 0f       	add	r30, r30
     422:	ff 1f       	adc	r31, r31
     424:	e0 50       	subi	r30, 0x00	; 0
     426:	ff 4f       	sbci	r31, 0xFF	; 255
     428:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <op2>
     42c:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <op2+0x1>
     430:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <op2+0x2>
     434:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <op2+0x3>
     438:	80 83       	st	Z, r24
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	a2 83       	std	Z+2, r26	; 0x02
     43e:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     440:	9e c3       	rjmp	.+1852   	; 0xb7e <__stack+0x27f>
			   }
			   case MOV:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op2)];
     442:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     446:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     44a:	ff 27       	eor	r31, r31
     44c:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <op2>
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	aa 0f       	add	r26, r26
     454:	bb 1f       	adc	r27, r27
     456:	aa 0f       	add	r26, r26
     458:	bb 1f       	adc	r27, r27
     45a:	a0 50       	subi	r26, 0x00	; 0
     45c:	bf 4f       	sbci	r27, 0xFF	; 255
     45e:	8d 91       	ld	r24, X+
     460:	9d 91       	ld	r25, X+
     462:	0d 90       	ld	r0, X+
     464:	bc 91       	ld	r27, X
     466:	a0 2d       	mov	r26, r0
     468:	ee 0f       	add	r30, r30
     46a:	ff 1f       	adc	r31, r31
     46c:	ee 0f       	add	r30, r30
     46e:	ff 1f       	adc	r31, r31
     470:	e0 50       	subi	r30, 0x00	; 0
     472:	ff 4f       	sbci	r31, 0xFF	; 255
     474:	80 83       	st	Z, r24
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	a2 83       	std	Z+2, r26	; 0x02
     47a:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     47c:	80 c3       	rjmp	.+1792   	; 0xb7e <__stack+0x27f>
			   }
			   case OUT:
			   {
				   if (op1 == PINA)
     47e:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <op1>
     482:	70 91 8d 01 	lds	r23, 0x018D	; 0x80018d <op1+0x1>
     486:	62 30       	cpi	r22, 0x02	; 2
     488:	71 05       	cpc	r23, r1
     48a:	21 f5       	brne	.+72     	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
				   {
					   const uint32_t porta = data_memory_read(PORTA) ^ reg[(uint8_t)(op2)];
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	80 e0       	ldi	r24, 0x00	; 0
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     498:	ac 01       	movw	r20, r24
     49a:	99 0f       	add	r25, r25
     49c:	66 0b       	sbc	r22, r22
     49e:	77 0b       	sbc	r23, r23
     4a0:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     4a4:	f0 e0       	ldi	r31, 0x00	; 0
     4a6:	ee 0f       	add	r30, r30
     4a8:	ff 1f       	adc	r31, r31
     4aa:	ee 0f       	add	r30, r30
     4ac:	ff 1f       	adc	r31, r31
     4ae:	e0 50       	subi	r30, 0x00	; 0
     4b0:	ff 4f       	sbci	r31, 0xFF	; 255
     4b2:	80 81       	ld	r24, Z
     4b4:	91 81       	ldd	r25, Z+1	; 0x01
     4b6:	a2 81       	ldd	r26, Z+2	; 0x02
     4b8:	b3 81       	ldd	r27, Z+3	; 0x03
     4ba:	9a 01       	movw	r18, r20
     4bc:	ab 01       	movw	r20, r22
     4be:	28 27       	eor	r18, r24
     4c0:	39 27       	eor	r19, r25
     4c2:	4a 27       	eor	r20, r26
     4c4:	5b 27       	eor	r21, r27
					   data_memory_write(PORTA, porta);
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	70 e0       	ldi	r23, 0x00	; 0
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
     4d2:	55 c3       	rjmp	.+1706   	; 0xb7e <__stack+0x27f>
				   }
				   else
				   {
					   data_memory_write(op1, reg[(uint8_t)(op2)]);
     4d4:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	ee 0f       	add	r30, r30
     4dc:	ff 1f       	adc	r31, r31
     4de:	ee 0f       	add	r30, r30
     4e0:	ff 1f       	adc	r31, r31
     4e2:	e0 50       	subi	r30, 0x00	; 0
     4e4:	ff 4f       	sbci	r31, 0xFF	; 255
     4e6:	20 81       	ld	r18, Z
     4e8:	31 81       	ldd	r19, Z+1	; 0x01
     4ea:	42 81       	ldd	r20, Z+2	; 0x02
     4ec:	53 81       	ldd	r21, Z+3	; 0x03
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
     4f6:	43 c3       	rjmp	.+1670   	; 0xb7e <__stack+0x27f>
				   }
				   break;
			   }
			   case IN:
			   {
				   reg[(uint8_t)(op1)] = data_memory_read((uint8_t)(op2));
     4f8:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     4fc:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     500:	dd 27       	eor	r29, r29
     502:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <op2>
     506:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <op2+0x1>
     50a:	a0 91 8a 01 	lds	r26, 0x018A	; 0x80018a <op2+0x2>
     50e:	b0 91 8b 01 	lds	r27, 0x018B	; 0x80018b <op2+0x3>
     512:	bc 01       	movw	r22, r24
     514:	cd 01       	movw	r24, r26
     516:	77 27       	eor	r23, r23
     518:	88 27       	eor	r24, r24
     51a:	99 27       	eor	r25, r25
     51c:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     520:	fe 01       	movw	r30, r28
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	ee 0f       	add	r30, r30
     528:	ff 1f       	adc	r31, r31
     52a:	e0 50       	subi	r30, 0x00	; 0
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	09 2e       	mov	r0, r25
     530:	00 0c       	add	r0, r0
     532:	aa 0b       	sbc	r26, r26
     534:	bb 0b       	sbc	r27, r27
     536:	80 83       	st	Z, r24
     538:	91 83       	std	Z+1, r25	; 0x01
     53a:	a2 83       	std	Z+2, r26	; 0x02
     53c:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     53e:	1f c3       	rjmp	.+1598   	; 0xb7e <__stack+0x27f>
			   }
			   case ST:
			   {
				   data_memory_write(reg[(uint8_t)(op1)], reg[(uint8_t)(op2)]);
     540:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	ee 0f       	add	r30, r30
     548:	ff 1f       	adc	r31, r31
     54a:	ee 0f       	add	r30, r30
     54c:	ff 1f       	adc	r31, r31
     54e:	e0 50       	subi	r30, 0x00	; 0
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	20 81       	ld	r18, Z
     554:	31 81       	ldd	r19, Z+1	; 0x01
     556:	42 81       	ldd	r20, Z+2	; 0x02
     558:	53 81       	ldd	r21, Z+3	; 0x03
     55a:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     55e:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     562:	ff 27       	eor	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	e0 50       	subi	r30, 0x00	; 0
     56e:	ff 4f       	sbci	r31, 0xFF	; 255
     570:	60 81       	ld	r22, Z
     572:	71 81       	ldd	r23, Z+1	; 0x01
     574:	82 81       	ldd	r24, Z+2	; 0x02
     576:	93 81       	ldd	r25, Z+3	; 0x03
     578:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
				   break;
     57c:	00 c3       	rjmp	.+1536   	; 0xb7e <__stack+0x27f>
			   }
			   case LD:
			   {
				   reg[(uint8_t)(op1)] = data_memory_read(reg[(uint8_t)(op2)]);
     57e:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     582:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     586:	dd 27       	eor	r29, r29
     588:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	ee 0f       	add	r30, r30
     590:	ff 1f       	adc	r31, r31
     592:	ee 0f       	add	r30, r30
     594:	ff 1f       	adc	r31, r31
     596:	e0 50       	subi	r30, 0x00	; 0
     598:	ff 4f       	sbci	r31, 0xFF	; 255
     59a:	60 81       	ld	r22, Z
     59c:	71 81       	ldd	r23, Z+1	; 0x01
     59e:	82 81       	ldd	r24, Z+2	; 0x02
     5a0:	93 81       	ldd	r25, Z+3	; 0x03
     5a2:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     5a6:	fe 01       	movw	r30, r28
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	ee 0f       	add	r30, r30
     5ae:	ff 1f       	adc	r31, r31
     5b0:	e0 50       	subi	r30, 0x00	; 0
     5b2:	ff 4f       	sbci	r31, 0xFF	; 255
     5b4:	09 2e       	mov	r0, r25
     5b6:	00 0c       	add	r0, r0
     5b8:	aa 0b       	sbc	r26, r26
     5ba:	bb 0b       	sbc	r27, r27
     5bc:	80 83       	st	Z, r24
     5be:	91 83       	std	Z+1, r25	; 0x01
     5c0:	a2 83       	std	Z+2, r26	; 0x02
     5c2:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     5c4:	dc c2       	rjmp	.+1464   	; 0xb7e <__stack+0x27f>
			   }
			   case CLR:
			   {
				   reg[(uint8_t)(op1)] = 0x00;
     5c6:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     5ca:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     5ce:	ff 27       	eor	r31, r31
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	ee 0f       	add	r30, r30
     5d6:	ff 1f       	adc	r31, r31
     5d8:	e0 50       	subi	r30, 0x00	; 0
     5da:	ff 4f       	sbci	r31, 0xFF	; 255
     5dc:	10 82       	st	Z, r1
     5de:	11 82       	std	Z+1, r1	; 0x01
     5e0:	12 82       	std	Z+2, r1	; 0x02
     5e2:	13 82       	std	Z+3, r1	; 0x03
				   break;
     5e4:	cc c2       	rjmp	.+1432   	; 0xb7e <__stack+0x27f>
			   }
			   case LSL:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op1)] << 1;
     5e6:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     5ea:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     5ee:	ff 27       	eor	r31, r31
     5f0:	ee 0f       	add	r30, r30
     5f2:	ff 1f       	adc	r31, r31
     5f4:	ee 0f       	add	r30, r30
     5f6:	ff 1f       	adc	r31, r31
     5f8:	e0 50       	subi	r30, 0x00	; 0
     5fa:	ff 4f       	sbci	r31, 0xFF	; 255
     5fc:	80 81       	ld	r24, Z
     5fe:	91 81       	ldd	r25, Z+1	; 0x01
     600:	a2 81       	ldd	r26, Z+2	; 0x02
     602:	b3 81       	ldd	r27, Z+3	; 0x03
     604:	88 0f       	add	r24, r24
     606:	99 1f       	adc	r25, r25
     608:	aa 1f       	adc	r26, r26
     60a:	bb 1f       	adc	r27, r27
     60c:	80 83       	st	Z, r24
     60e:	91 83       	std	Z+1, r25	; 0x01
     610:	a2 83       	std	Z+2, r26	; 0x02
     612:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     614:	b4 c2       	rjmp	.+1384   	; 0xb7e <__stack+0x27f>
			   }
			   case LSR:
			   {
				   reg[(uint8_t)(op1)] = reg[(uint8_t)(op1)] >> 1;
     616:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     61a:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     61e:	ff 27       	eor	r31, r31
     620:	ee 0f       	add	r30, r30
     622:	ff 1f       	adc	r31, r31
     624:	ee 0f       	add	r30, r30
     626:	ff 1f       	adc	r31, r31
     628:	e0 50       	subi	r30, 0x00	; 0
     62a:	ff 4f       	sbci	r31, 0xFF	; 255
     62c:	80 81       	ld	r24, Z
     62e:	91 81       	ldd	r25, Z+1	; 0x01
     630:	a2 81       	ldd	r26, Z+2	; 0x02
     632:	b3 81       	ldd	r27, Z+3	; 0x03
     634:	b6 95       	lsr	r27
     636:	a7 95       	ror	r26
     638:	97 95       	ror	r25
     63a:	87 95       	ror	r24
     63c:	80 83       	st	Z, r24
     63e:	91 83       	std	Z+1, r25	; 0x01
     640:	a2 83       	std	Z+2, r26	; 0x02
     642:	b3 83       	std	Z+3, r27	; 0x03
				   break;
     644:	9c c2       	rjmp	.+1336   	; 0xb7e <__stack+0x27f>
			   }
			   case ORI:
			   {
				   reg[(uint8_t)(op1)] = alu(OR, reg[(uint8_t)(op1)], op2, sr);
     646:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     64a:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     64e:	dd 27       	eor	r29, r29
     650:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     654:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     658:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     65c:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     660:	cc 0f       	add	r28, r28
     662:	dd 1f       	adc	r29, r29
     664:	cc 0f       	add	r28, r28
     666:	dd 1f       	adc	r29, r29
     668:	c0 50       	subi	r28, 0x00	; 0
     66a:	df 4f       	sbci	r29, 0xFF	; 255
     66c:	48 81       	ld	r20, Y
     66e:	59 81       	ldd	r21, Y+1	; 0x01
     670:	6a 81       	ldd	r22, Y+2	; 0x02
     672:	7b 81       	ldd	r23, Y+3	; 0x03
     674:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     678:	8d e0       	ldi	r24, 0x0D	; 13
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     680:	68 83       	st	Y, r22
     682:	79 83       	std	Y+1, r23	; 0x01
     684:	8a 83       	std	Y+2, r24	; 0x02
     686:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     688:	7a c2       	rjmp	.+1268   	; 0xb7e <__stack+0x27f>
			   }
			   case ANDI:
			   {
				   reg[(uint8_t)(op1)] = alu(AND, reg[(uint8_t)(op1)], op2, sr);
     68a:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     68e:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     692:	dd 27       	eor	r29, r29
     694:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     698:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     69c:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     6a0:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     6a4:	cc 0f       	add	r28, r28
     6a6:	dd 1f       	adc	r29, r29
     6a8:	cc 0f       	add	r28, r28
     6aa:	dd 1f       	adc	r29, r29
     6ac:	c0 50       	subi	r28, 0x00	; 0
     6ae:	df 4f       	sbci	r29, 0xFF	; 255
     6b0:	48 81       	ld	r20, Y
     6b2:	59 81       	ldd	r21, Y+1	; 0x01
     6b4:	6a 81       	ldd	r22, Y+2	; 0x02
     6b6:	7b 81       	ldd	r23, Y+3	; 0x03
     6b8:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     6bc:	8e e0       	ldi	r24, 0x0E	; 14
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     6c4:	68 83       	st	Y, r22
     6c6:	79 83       	std	Y+1, r23	; 0x01
     6c8:	8a 83       	std	Y+2, r24	; 0x02
     6ca:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     6cc:	58 c2       	rjmp	.+1200   	; 0xb7e <__stack+0x27f>
			   }
			   case XORI:
			   {
				   reg[(uint8_t)(op1)] = alu(XOR, reg[(uint8_t)(op1)], op2, sr);
     6ce:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     6d2:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     6d6:	dd 27       	eor	r29, r29
     6d8:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     6dc:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     6e0:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     6e4:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     6e8:	cc 0f       	add	r28, r28
     6ea:	dd 1f       	adc	r29, r29
     6ec:	cc 0f       	add	r28, r28
     6ee:	dd 1f       	adc	r29, r29
     6f0:	c0 50       	subi	r28, 0x00	; 0
     6f2:	df 4f       	sbci	r29, 0xFF	; 255
     6f4:	48 81       	ld	r20, Y
     6f6:	59 81       	ldd	r21, Y+1	; 0x01
     6f8:	6a 81       	ldd	r22, Y+2	; 0x02
     6fa:	7b 81       	ldd	r23, Y+3	; 0x03
     6fc:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     708:	68 83       	st	Y, r22
     70a:	79 83       	std	Y+1, r23	; 0x01
     70c:	8a 83       	std	Y+2, r24	; 0x02
     70e:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     710:	36 c2       	rjmp	.+1132   	; 0xb7e <__stack+0x27f>
			   }
			   case OR:
			   {
				   reg[(uint8_t)(op1)] = alu(OR, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr);
     712:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     716:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     71a:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     71e:	dd 27       	eor	r29, r29
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e0 50       	subi	r30, 0x00	; 0
     72c:	ff 4f       	sbci	r31, 0xFF	; 255
     72e:	00 81       	ld	r16, Z
     730:	11 81       	ldd	r17, Z+1	; 0x01
     732:	22 81       	ldd	r18, Z+2	; 0x02
     734:	33 81       	ldd	r19, Z+3	; 0x03
     736:	cc 0f       	add	r28, r28
     738:	dd 1f       	adc	r29, r29
     73a:	cc 0f       	add	r28, r28
     73c:	dd 1f       	adc	r29, r29
     73e:	c0 50       	subi	r28, 0x00	; 0
     740:	df 4f       	sbci	r29, 0xFF	; 255
     742:	48 81       	ld	r20, Y
     744:	59 81       	ldd	r21, Y+1	; 0x01
     746:	6a 81       	ldd	r22, Y+2	; 0x02
     748:	7b 81       	ldd	r23, Y+3	; 0x03
     74a:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     74e:	8d e0       	ldi	r24, 0x0D	; 13
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     756:	68 83       	st	Y, r22
     758:	79 83       	std	Y+1, r23	; 0x01
     75a:	8a 83       	std	Y+2, r24	; 0x02
     75c:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     75e:	0f c2       	rjmp	.+1054   	; 0xb7e <__stack+0x27f>
			   }
			   case AND:
			   {
				   reg[(uint8_t)(op1)] = alu(AND, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr);
     760:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     764:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     768:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     76c:	dd 27       	eor	r29, r29
     76e:	f0 e0       	ldi	r31, 0x00	; 0
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	e0 50       	subi	r30, 0x00	; 0
     77a:	ff 4f       	sbci	r31, 0xFF	; 255
     77c:	00 81       	ld	r16, Z
     77e:	11 81       	ldd	r17, Z+1	; 0x01
     780:	22 81       	ldd	r18, Z+2	; 0x02
     782:	33 81       	ldd	r19, Z+3	; 0x03
     784:	cc 0f       	add	r28, r28
     786:	dd 1f       	adc	r29, r29
     788:	cc 0f       	add	r28, r28
     78a:	dd 1f       	adc	r29, r29
     78c:	c0 50       	subi	r28, 0x00	; 0
     78e:	df 4f       	sbci	r29, 0xFF	; 255
     790:	48 81       	ld	r20, Y
     792:	59 81       	ldd	r21, Y+1	; 0x01
     794:	6a 81       	ldd	r22, Y+2	; 0x02
     796:	7b 81       	ldd	r23, Y+3	; 0x03
     798:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     79c:	8e e0       	ldi	r24, 0x0E	; 14
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     7a4:	68 83       	st	Y, r22
     7a6:	79 83       	std	Y+1, r23	; 0x01
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     7ac:	e8 c1       	rjmp	.+976    	; 0xb7e <__stack+0x27f>
			   }
			   case XOR:
			   {
				   reg[(uint8_t)(op1)] = alu(XOR, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr);
     7ae:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     7b2:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     7b6:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     7ba:	dd 27       	eor	r29, r29
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	ee 0f       	add	r30, r30
     7c4:	ff 1f       	adc	r31, r31
     7c6:	e0 50       	subi	r30, 0x00	; 0
     7c8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ca:	00 81       	ld	r16, Z
     7cc:	11 81       	ldd	r17, Z+1	; 0x01
     7ce:	22 81       	ldd	r18, Z+2	; 0x02
     7d0:	33 81       	ldd	r19, Z+3	; 0x03
     7d2:	cc 0f       	add	r28, r28
     7d4:	dd 1f       	adc	r29, r29
     7d6:	cc 0f       	add	r28, r28
     7d8:	dd 1f       	adc	r29, r29
     7da:	c0 50       	subi	r28, 0x00	; 0
     7dc:	df 4f       	sbci	r29, 0xFF	; 255
     7de:	48 81       	ld	r20, Y
     7e0:	59 81       	ldd	r21, Y+1	; 0x01
     7e2:	6a 81       	ldd	r22, Y+2	; 0x02
     7e4:	7b 81       	ldd	r23, Y+3	; 0x03
     7e6:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     7ea:	8f e0       	ldi	r24, 0x0F	; 15
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     7f2:	68 83       	st	Y, r22
     7f4:	79 83       	std	Y+1, r23	; 0x01
     7f6:	8a 83       	std	Y+2, r24	; 0x02
     7f8:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     7fa:	c1 c1       	rjmp	.+898    	; 0xb7e <__stack+0x27f>
			   }
			   case ADDI:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], op2, sr);
     7fc:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     800:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     804:	dd 27       	eor	r29, r29
     806:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     80a:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     80e:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     812:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     816:	cc 0f       	add	r28, r28
     818:	dd 1f       	adc	r29, r29
     81a:	cc 0f       	add	r28, r28
     81c:	dd 1f       	adc	r29, r29
     81e:	c0 50       	subi	r28, 0x00	; 0
     820:	df 4f       	sbci	r29, 0xFF	; 255
     822:	48 81       	ld	r20, Y
     824:	59 81       	ldd	r21, Y+1	; 0x01
     826:	6a 81       	ldd	r22, Y+2	; 0x02
     828:	7b 81       	ldd	r23, Y+3	; 0x03
     82a:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     82e:	82 e1       	ldi	r24, 0x12	; 18
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     836:	68 83       	st	Y, r22
     838:	79 83       	std	Y+1, r23	; 0x01
     83a:	8a 83       	std	Y+2, r24	; 0x02
     83c:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     83e:	9f c1       	rjmp	.+830    	; 0xb7e <__stack+0x27f>
			   }
			   case SUBI:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], op2, sr);
     840:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     844:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     848:	dd 27       	eor	r29, r29
     84a:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     84e:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     852:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     856:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     85a:	cc 0f       	add	r28, r28
     85c:	dd 1f       	adc	r29, r29
     85e:	cc 0f       	add	r28, r28
     860:	dd 1f       	adc	r29, r29
     862:	c0 50       	subi	r28, 0x00	; 0
     864:	df 4f       	sbci	r29, 0xFF	; 255
     866:	48 81       	ld	r20, Y
     868:	59 81       	ldd	r21, Y+1	; 0x01
     86a:	6a 81       	ldd	r22, Y+2	; 0x02
     86c:	7b 81       	ldd	r23, Y+3	; 0x03
     86e:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     872:	83 e1       	ldi	r24, 0x13	; 19
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     87a:	68 83       	st	Y, r22
     87c:	79 83       	std	Y+1, r23	; 0x01
     87e:	8a 83       	std	Y+2, r24	; 0x02
     880:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     882:	7d c1       	rjmp	.+762    	; 0xb7e <__stack+0x27f>
			   }
			   case ADD:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr);
     884:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     888:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     88c:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     890:	dd 27       	eor	r29, r29
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	ee 0f       	add	r30, r30
     896:	ff 1f       	adc	r31, r31
     898:	ee 0f       	add	r30, r30
     89a:	ff 1f       	adc	r31, r31
     89c:	e0 50       	subi	r30, 0x00	; 0
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	00 81       	ld	r16, Z
     8a2:	11 81       	ldd	r17, Z+1	; 0x01
     8a4:	22 81       	ldd	r18, Z+2	; 0x02
     8a6:	33 81       	ldd	r19, Z+3	; 0x03
     8a8:	cc 0f       	add	r28, r28
     8aa:	dd 1f       	adc	r29, r29
     8ac:	cc 0f       	add	r28, r28
     8ae:	dd 1f       	adc	r29, r29
     8b0:	c0 50       	subi	r28, 0x00	; 0
     8b2:	df 4f       	sbci	r29, 0xFF	; 255
     8b4:	48 81       	ld	r20, Y
     8b6:	59 81       	ldd	r21, Y+1	; 0x01
     8b8:	6a 81       	ldd	r22, Y+2	; 0x02
     8ba:	7b 81       	ldd	r23, Y+3	; 0x03
     8bc:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     8c0:	82 e1       	ldi	r24, 0x12	; 18
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     8c8:	68 83       	st	Y, r22
     8ca:	79 83       	std	Y+1, r23	; 0x01
     8cc:	8a 83       	std	Y+2, r24	; 0x02
     8ce:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     8d0:	56 c1       	rjmp	.+684    	; 0xb7e <__stack+0x27f>
			   }
			   case SUB:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr);
     8d2:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     8d6:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     8da:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     8de:	dd 27       	eor	r29, r29
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	ee 0f       	add	r30, r30
     8e4:	ff 1f       	adc	r31, r31
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	e0 50       	subi	r30, 0x00	; 0
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	00 81       	ld	r16, Z
     8f0:	11 81       	ldd	r17, Z+1	; 0x01
     8f2:	22 81       	ldd	r18, Z+2	; 0x02
     8f4:	33 81       	ldd	r19, Z+3	; 0x03
     8f6:	cc 0f       	add	r28, r28
     8f8:	dd 1f       	adc	r29, r29
     8fa:	cc 0f       	add	r28, r28
     8fc:	dd 1f       	adc	r29, r29
     8fe:	c0 50       	subi	r28, 0x00	; 0
     900:	df 4f       	sbci	r29, 0xFF	; 255
     902:	48 81       	ld	r20, Y
     904:	59 81       	ldd	r21, Y+1	; 0x01
     906:	6a 81       	ldd	r22, Y+2	; 0x02
     908:	7b 81       	ldd	r23, Y+3	; 0x03
     90a:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     90e:	83 e1       	ldi	r24, 0x13	; 19
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     916:	68 83       	st	Y, r22
     918:	79 83       	std	Y+1, r23	; 0x01
     91a:	8a 83       	std	Y+2, r24	; 0x02
     91c:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     91e:	2f c1       	rjmp	.+606    	; 0xb7e <__stack+0x27f>
			   }
			   case INC:
			   {
				   reg[(uint8_t)(op1)] = alu(ADD, reg[(uint8_t)(op1)], 1, sr);
     920:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     924:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     928:	dd 27       	eor	r29, r29
     92a:	cc 0f       	add	r28, r28
     92c:	dd 1f       	adc	r29, r29
     92e:	cc 0f       	add	r28, r28
     930:	dd 1f       	adc	r29, r29
     932:	c0 50       	subi	r28, 0x00	; 0
     934:	df 4f       	sbci	r29, 0xFF	; 255
     936:	48 81       	ld	r20, Y
     938:	59 81       	ldd	r21, Y+1	; 0x01
     93a:	6a 81       	ldd	r22, Y+2	; 0x02
     93c:	7b 81       	ldd	r23, Y+3	; 0x03
     93e:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     942:	01 e0       	ldi	r16, 0x01	; 1
     944:	10 e0       	ldi	r17, 0x00	; 0
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	82 e1       	ldi	r24, 0x12	; 18
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     952:	68 83       	st	Y, r22
     954:	79 83       	std	Y+1, r23	; 0x01
     956:	8a 83       	std	Y+2, r24	; 0x02
     958:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     95a:	11 c1       	rjmp	.+546    	; 0xb7e <__stack+0x27f>
			   }
			   case DEC:
			   {
				   reg[(uint8_t)(op1)] = alu(SUB, reg[(uint8_t)(op1)], 1, sr);
     95c:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     960:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     964:	dd 27       	eor	r29, r29
     966:	cc 0f       	add	r28, r28
     968:	dd 1f       	adc	r29, r29
     96a:	cc 0f       	add	r28, r28
     96c:	dd 1f       	adc	r29, r29
     96e:	c0 50       	subi	r28, 0x00	; 0
     970:	df 4f       	sbci	r29, 0xFF	; 255
     972:	48 81       	ld	r20, Y
     974:	59 81       	ldd	r21, Y+1	; 0x01
     976:	6a 81       	ldd	r22, Y+2	; 0x02
     978:	7b 81       	ldd	r23, Y+3	; 0x03
     97a:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     97e:	01 e0       	ldi	r16, 0x01	; 1
     980:	10 e0       	ldi	r17, 0x00	; 0
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	83 e1       	ldi	r24, 0x13	; 19
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
     98e:	68 83       	st	Y, r22
     990:	79 83       	std	Y+1, r23	; 0x01
     992:	8a 83       	std	Y+2, r24	; 0x02
     994:	9b 83       	std	Y+3, r25	; 0x03
				   break;
     996:	f3 c0       	rjmp	.+486    	; 0xb7e <__stack+0x27f>
			   }
			   case CMPI:
			   {
				   (void)(alu(SUB, reg[(uint8_t)(op1)], op2, sr));
     998:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     99c:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     9a0:	ff 27       	eor	r31, r31
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	ee 0f       	add	r30, r30
     9a8:	ff 1f       	adc	r31, r31
     9aa:	e0 50       	subi	r30, 0x00	; 0
     9ac:	ff 4f       	sbci	r31, 0xFF	; 255
     9ae:	40 81       	ld	r20, Z
     9b0:	51 81       	ldd	r21, Z+1	; 0x01
     9b2:	62 81       	ldd	r22, Z+2	; 0x02
     9b4:	73 81       	ldd	r23, Z+3	; 0x03
     9b6:	00 91 88 01 	lds	r16, 0x0188	; 0x800188 <op2>
     9ba:	10 91 89 01 	lds	r17, 0x0189	; 0x800189 <op2+0x1>
     9be:	20 91 8a 01 	lds	r18, 0x018A	; 0x80018a <op2+0x2>
     9c2:	30 91 8b 01 	lds	r19, 0x018B	; 0x80018b <op2+0x3>
     9c6:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     9ca:	83 e1       	ldi	r24, 0x13	; 19
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
				   break;
     9d2:	d5 c0       	rjmp	.+426    	; 0xb7e <__stack+0x27f>
			   }
			   case CMP:
			   {
				   (void)(alu(SUB, reg[(uint8_t)(op1)], reg[(uint8_t)(op2)], sr));
     9d4:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <op2>
     9d8:	f0 e0       	ldi	r31, 0x00	; 0
     9da:	ee 0f       	add	r30, r30
     9dc:	ff 1f       	adc	r31, r31
     9de:	ee 0f       	add	r30, r30
     9e0:	ff 1f       	adc	r31, r31
     9e2:	e0 50       	subi	r30, 0x00	; 0
     9e4:	ff 4f       	sbci	r31, 0xFF	; 255
     9e6:	00 81       	ld	r16, Z
     9e8:	11 81       	ldd	r17, Z+1	; 0x01
     9ea:	22 81       	ldd	r18, Z+2	; 0x02
     9ec:	33 81       	ldd	r19, Z+3	; 0x03
     9ee:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     9f2:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     9f6:	ff 27       	eor	r31, r31
     9f8:	ee 0f       	add	r30, r30
     9fa:	ff 1f       	adc	r31, r31
     9fc:	ee 0f       	add	r30, r30
     9fe:	ff 1f       	adc	r31, r31
     a00:	e0 50       	subi	r30, 0x00	; 0
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	40 81       	ld	r20, Z
     a06:	51 81       	ldd	r21, Z+1	; 0x01
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	e0 90 90 01 	lds	r14, 0x0190	; 0x800190 <sr>
     a10:	83 e1       	ldi	r24, 0x13	; 19
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 6e 00 	call	0xdc	; 0xdc <alu>
				   break;
     a18:	b2 c0       	rjmp	.+356    	; 0xb7e <__stack+0x27f>
			   }
			   case CALL:
			   {
				   stack_push(pc);
     a1a:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <pc>
     a1e:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <pc+0x1>
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 af 07 	call	0xf5e	; 0xf5e <stack_push>
				   pc = op1;
     a2a:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     a2e:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     a32:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     a36:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
				   break;
     a3a:	a1 c0       	rjmp	.+322    	; 0xb7e <__stack+0x27f>
			   }
			   case RET:
			   {
				   pc = stack_pop();
     a3c:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <stack_pop>
     a40:	70 93 9a 01 	sts	0x019A, r23	; 0x80019a <pc+0x1>
     a44:	60 93 99 01 	sts	0x0199, r22	; 0x800199 <pc>
				   break;
     a48:	9a c0       	rjmp	.+308    	; 0xb7e <__stack+0x27f>
	return;
}

static inline void return_from_interrupt(void)
{
	pc = stack_pop();
     a4a:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <stack_pop>
     a4e:	70 93 9a 01 	sts	0x019A, r23	; 0x80019a <pc+0x1>
     a52:	60 93 99 01 	sts	0x0199, r22	; 0x800199 <pc>
	set(sr, I);
     a56:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     a5a:	80 62       	ori	r24, 0x20	; 32
     a5c:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <sr>
     a60:	8e c0       	rjmp	.+284    	; 0xb7e <__stack+0x27f>
				   return_from_interrupt();
				   break;
			   }
			   case PUSH:
			   {
				   stack_push(reg[(uint8_t)(op1)]);
     a62:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <op1>
     a66:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <op1+0x1>
     a6a:	ff 27       	eor	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	ee 0f       	add	r30, r30
     a72:	ff 1f       	adc	r31, r31
     a74:	e0 50       	subi	r30, 0x00	; 0
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	60 81       	ld	r22, Z
     a7a:	71 81       	ldd	r23, Z+1	; 0x01
     a7c:	82 81       	ldd	r24, Z+2	; 0x02
     a7e:	93 81       	ldd	r25, Z+3	; 0x03
     a80:	0e 94 af 07 	call	0xf5e	; 0xf5e <stack_push>
				   break;
     a84:	7c c0       	rjmp	.+248    	; 0xb7e <__stack+0x27f>
			   }
			   case POP:
			   {
				   reg[(uint8_t)(op1)] = stack_pop();
     a86:	c0 91 8c 01 	lds	r28, 0x018C	; 0x80018c <op1>
     a8a:	d0 91 8d 01 	lds	r29, 0x018D	; 0x80018d <op1+0x1>
     a8e:	dd 27       	eor	r29, r29
     a90:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <stack_pop>
     a94:	fe 01       	movw	r30, r28
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	e0 50       	subi	r30, 0x00	; 0
     aa0:	ff 4f       	sbci	r31, 0xFF	; 255
     aa2:	60 83       	st	Z, r22
     aa4:	71 83       	std	Z+1, r23	; 0x01
     aa6:	82 83       	std	Z+2, r24	; 0x02
     aa8:	93 83       	std	Z+3, r25	; 0x03
				   break;
     aaa:	69 c0       	rjmp	.+210    	; 0xb7e <__stack+0x27f>
			   }
			   case JMP:
			   {
				   pc = (uint16_t)(op1);
     aac:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     ab0:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     ab4:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     ab8:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
				   break;
     abc:	60 c0       	rjmp	.+192    	; 0xb7e <__stack+0x27f>
			   }
			   case JE:
			   {
				   if (read(sr, Z)) pc = op1;
     abe:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     ac2:	82 ff       	sbrs	r24, 2
     ac4:	5c c0       	rjmp	.+184    	; 0xb7e <__stack+0x27f>
     ac6:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     aca:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     ace:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     ad2:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     ad6:	53 c0       	rjmp	.+166    	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case JNE:
			   {
				   if (!read(sr, Z)) pc = op1;
     ad8:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     adc:	82 fd       	sbrc	r24, 2
     ade:	4f c0       	rjmp	.+158    	; 0xb7e <__stack+0x27f>
     ae0:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     ae4:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     ae8:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     aec:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     af0:	46 c0       	rjmp	.+140    	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case JGE:
			   {
				   if (!read(sr, S)) pc = op1;
     af2:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     af6:	84 fd       	sbrc	r24, 4
     af8:	42 c0       	rjmp	.+132    	; 0xb7e <__stack+0x27f>
     afa:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     afe:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     b02:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     b06:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     b0a:	39 c0       	rjmp	.+114    	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case JGT:
			   {
				   if (!read(sr, S) && !read(sr, Z)) pc = op1;
     b0c:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b10:	84 fd       	sbrc	r24, 4
     b12:	35 c0       	rjmp	.+106    	; 0xb7e <__stack+0x27f>
     b14:	82 fd       	sbrc	r24, 2
     b16:	33 c0       	rjmp	.+102    	; 0xb7e <__stack+0x27f>
     b18:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     b1c:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     b20:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     b24:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     b28:	2a c0       	rjmp	.+84     	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case JLE:
			   {
				   if (read(sr, S) || read(sr, Z)) pc = op1;
     b2a:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b2e:	84 fd       	sbrc	r24, 4
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <__stack+0x237>
     b32:	82 ff       	sbrs	r24, 2
     b34:	24 c0       	rjmp	.+72     	; 0xb7e <__stack+0x27f>
     b36:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     b3a:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     b3e:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     b42:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     b46:	1b c0       	rjmp	.+54     	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case JLO:
			   {
				   if (read(sr, S)) pc = op1;
     b48:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b4c:	84 ff       	sbrs	r24, 4
     b4e:	17 c0       	rjmp	.+46     	; 0xb7e <__stack+0x27f>
     b50:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <op1>
     b54:	90 91 8d 01 	lds	r25, 0x018D	; 0x80018d <op1+0x1>
     b58:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     b5c:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
     b60:	0e c0       	rjmp	.+28     	; 0xb7e <__stack+0x27f>
				   break;
			   }
			   case SEI:
			   {
				   set(sr, I);
     b62:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b66:	80 62       	ori	r24, 0x20	; 32
     b68:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <sr>
				   break;
     b6c:	08 c0       	rjmp	.+16     	; 0xb7e <__stack+0x27f>
			   }
			   case CLI:
			   {
				   clr(sr, I);
     b6e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b72:	8f 7d       	andi	r24, 0xDF	; 223
     b74:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <sr>
				   break;
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <__stack+0x27f>
			   }
			   default:
			   {
				   io_reset();
     b7a:	0e 94 cc 00 	call	0x198	; 0x198 <io_reset>
	return;
}

static inline void check_for_interrupt_requests(void)
{
	if (read(sr, I))
     b7e:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     b82:	85 ff       	sbrs	r24, 5
     b84:	31 c0       	rjmp	.+98     	; 0xbe8 <__stack+0x2e9>
	{
		uint32_t ifr = data_memory_read(IFR);
     b86:	64 e0       	ldi	r22, 0x04	; 4
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     b92:	ec 01       	movw	r28, r24
     b94:	6c 01       	movw	r12, r24
     b96:	99 0f       	add	r25, r25
     b98:	ee 08       	sbc	r14, r14
     b9a:	ff 08       	sbc	r15, r15
		const uint32_t icr = data_memory_read(ICR);
     b9c:	63 e0       	ldi	r22, 0x03	; 3
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>

		if (read(ifr, PCIFA) && read(icr, PCIEA))
     ba8:	c0 ff       	sbrs	r28, 0
     baa:	1e c0       	rjmp	.+60     	; 0xbe8 <__stack+0x2e9>
     bac:	80 ff       	sbrs	r24, 0
     bae:	1c c0       	rjmp	.+56     	; 0xbe8 <__stack+0x2e9>
		{
			clr(ifr, PCIFA);
     bb0:	a7 01       	movw	r20, r14
     bb2:	96 01       	movw	r18, r12
     bb4:	2e 7f       	andi	r18, 0xFE	; 254
			data_memory_write(IFR, ifr);
     bb6:	64 e0       	ldi	r22, 0x04	; 4
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
	}
	return;
}
static inline void generate_interrupt(const uint16_t interrupt_vector)
{
	stack_push(pc);
     bc2:	60 91 99 01 	lds	r22, 0x0199	; 0x800199 <pc>
     bc6:	70 91 9a 01 	lds	r23, 0x019A	; 0x80019a <pc+0x1>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	0e 94 af 07 	call	0xf5e	; 0xf5e <stack_push>
	pc = interrupt_vector;
     bd2:	82 e0       	ldi	r24, 0x02	; 2
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <pc+0x1>
     bda:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <pc>
	clr(sr, I);
     bde:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <sr>
     be2:	8f 7d       	andi	r24, 0xDF	; 223
     be4:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <sr>
				   break;
			   }
		   }

		   check_for_interrupt_requests();
		   current_state = CPU_STATE_FETCH;
     be8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <current_state>
     bec:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <current_state+0x1>
     bf0:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <current_state+0x2>
     bf4:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <current_state+0x3>
		   break;
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <__stack+0x2ff>
	   }
	   default:
	   {
		   io_reset();
     bfa:	0e 94 cc 00 	call	0x198	; 0x198 <io_reset>
		   break;
	   }
   }

   io_update();
     bfe:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <io_update>
	}
}

static inline void monitor_interrupts(void)
{
	const uint32_t pina = data_memory_read(PINA);
     c02:	62 e0       	ldi	r22, 0x02	; 2
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     c0e:	6c 01       	movw	r12, r24
     c10:	99 0f       	add	r25, r25
     c12:	ee 08       	sbc	r14, r14
     c14:	ff 08       	sbc	r15, r15

	for (uint8_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     c16:	10 e0       	ldi	r17, 0x00	; 0
     c18:	3c c0       	rjmp	.+120    	; 0xc92 <__stack+0x393>
*       - reg: Reference to the register.
*       - bit: The bit to be read in the referenced register.
********************************************************************************/
static inline bool read(const uint16_t reg, const uint32_t bit)
{
	return (bool)(reg & (1 << bit));
     c1a:	c1 e0       	ldi	r28, 0x01	; 1
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	01 2e       	mov	r0, r17
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <__stack+0x327>
     c22:	cc 0f       	add	r28, r28
     c24:	dd 1f       	adc	r29, r29
     c26:	0a 94       	dec	r0
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <__stack+0x323>
     c2a:	9e 01       	movw	r18, r28
     c2c:	2c 21       	and	r18, r12
     c2e:	3d 21       	and	r19, r13
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	23 2b       	or	r18, r19
     c34:	09 f4       	brne	.+2      	; 0xc38 <__stack+0x339>
     c36:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (read(pina, i) != read(pina_last_value, i))
     c38:	40 91 80 01 	lds	r20, 0x0180	; 0x800180 <pina_last_value>
     c3c:	50 91 81 01 	lds	r21, 0x0181	; 0x800181 <pina_last_value+0x1>
     c40:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <pina_last_value+0x2>
     c44:	70 91 83 01 	lds	r23, 0x0183	; 0x800183 <pina_last_value+0x3>
     c48:	4c 23       	and	r20, r28
     c4a:	5d 23       	and	r21, r29
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	45 2b       	or	r20, r21
     c50:	09 f4       	brne	.+2      	; 0xc54 <__stack+0x355>
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	98 17       	cp	r25, r24
     c56:	e1 f0       	breq	.+56     	; 0xc90 <__stack+0x391>
		{
			const uint32_t pcmsk = data_memory_read(PCMSK);
     c58:	65 e0       	ldi	r22, 0x05	; 5
     c5a:	70 e0       	ldi	r23, 0x00	; 0
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
     c64:	8c 23       	and	r24, r28
     c66:	9d 23       	and	r25, r29

			if (read(pcmsk, i))
     c68:	89 2b       	or	r24, r25
     c6a:	91 f0       	breq	.+36     	; 0xc90 <__stack+0x391>
			{
				uint32_t ifr = data_memory_read(IFR);
     c6c:	64 e0       	ldi	r22, 0x04	; 4
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 8a 06 	call	0xd14	; 0xd14 <data_memory_read>
				set(ifr, PCIFA);
     c78:	81 60       	ori	r24, 0x01	; 1
     c7a:	9c 01       	movw	r18, r24
     c7c:	99 0f       	add	r25, r25
     c7e:	44 0b       	sbc	r20, r20
     c80:	55 0b       	sbc	r21, r21
				data_memory_write(IFR, ifr);
     c82:	64 e0       	ldi	r22, 0x04	; 4
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 74 06 	call	0xce8	; 0xce8 <data_memory_write>
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <__stack+0x397>

static inline void monitor_interrupts(void)
{
	const uint32_t pina = data_memory_read(PINA);

	for (uint8_t i = 0; i < CPU_REGISTER_ADDRESS_WIDTH; ++i)
     c90:	1f 5f       	subi	r17, 0xFF	; 255
     c92:	10 32       	cpi	r17, 0x20	; 32
     c94:	10 f2       	brcs	.-124    	; 0xc1a <__stack+0x31b>
				break;
			}
		}
	}

	pina_last_value = pina;
     c96:	c0 92 80 01 	sts	0x0180, r12	; 0x800180 <pina_last_value>
     c9a:	d0 92 81 01 	sts	0x0181, r13	; 0x800181 <pina_last_value+0x1>
     c9e:	e0 92 82 01 	sts	0x0182, r14	; 0x800182 <pina_last_value+0x2>
     ca2:	f0 92 83 01 	sts	0x0183, r15	; 0x800183 <pina_last_value+0x3>

   io_update();
   monitor_interrupts();
   return;
   
}
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	ff 90       	pop	r15
     cb0:	ef 90       	pop	r14
     cb2:	df 90       	pop	r13
     cb4:	cf 90       	pop	r12
     cb6:	08 95       	ret

00000cb8 <data_memory_reset>:
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	dc 01       	movw	r26, r24
     cbe:	0e c0       	rjmp	.+28     	; 0xcdc <data_memory_reset+0x24>
	{
		data[i] = 0x00;
     cc0:	fc 01       	movw	r30, r24
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	ee 0f       	add	r30, r30
     cc8:	ff 1f       	adc	r31, r31
     cca:	e5 56       	subi	r30, 0x65	; 101
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	10 82       	st	Z, r1
     cd0:	11 82       	std	Z+1, r1	; 0x01
     cd2:	12 82       	std	Z+2, r1	; 0x02
     cd4:	13 82       	std	Z+3, r1	; 0x03
/********************************************************************************
* data_memory_reset: Clears entire data memory.
********************************************************************************/
void data_memory_reset(void)
{
	for (uint32_t i = 0; i < DATA_MEMORY_ADDRESS_WIDTH; ++i)
     cd6:	01 96       	adiw	r24, 0x01	; 1
     cd8:	a1 1d       	adc	r26, r1
     cda:	b1 1d       	adc	r27, r1
     cdc:	84 36       	cpi	r24, 0x64	; 100
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	68 f3       	brcs	.-38     	; 0xcc0 <data_memory_reset+0x8>
	{
		data[i] = 0x00;
	}
	return;
}
     ce6:	08 95       	ret

00000ce8 <data_memory_write>:
*                    - value  : The 8-bit value to write to data memory.
********************************************************************************/
int data_memory_write(const uint32_t address,
					  const uint32_t value)
{
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
     ce8:	64 36       	cpi	r22, 0x64	; 100
     cea:	71 05       	cpc	r23, r1
     cec:	81 05       	cpc	r24, r1
     cee:	91 05       	cpc	r25, r1
     cf0:	70 f4       	brcc	.+28     	; 0xd0e <data_memory_write+0x26>
	{
		data[address] = value;
     cf2:	66 0f       	add	r22, r22
     cf4:	77 1f       	adc	r23, r23
     cf6:	66 0f       	add	r22, r22
     cf8:	77 1f       	adc	r23, r23
     cfa:	fb 01       	movw	r30, r22
     cfc:	e5 56       	subi	r30, 0x65	; 101
     cfe:	fe 4f       	sbci	r31, 0xFE	; 254
     d00:	20 83       	st	Z, r18
     d02:	31 83       	std	Z+1, r19	; 0x01
     d04:	42 83       	std	Z+2, r20	; 0x02
     d06:	53 83       	std	Z+3, r21	; 0x03
		return 0;
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	08 95       	ret
	}
	else
	{
		return 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     d12:	08 95       	ret

00000d14 <data_memory_read>:
*
*                   - address: Read location in data memory.
********************************************************************************/
int data_memory_read(const uint32_t address)
{
	if (address < DATA_MEMORY_ADDRESS_WIDTH)
     d14:	64 36       	cpi	r22, 0x64	; 100
     d16:	71 05       	cpc	r23, r1
     d18:	81 05       	cpc	r24, r1
     d1a:	91 05       	cpc	r25, r1
     d1c:	50 f4       	brcc	.+20     	; 0xd32 <data_memory_read+0x1e>
	{
		return data[address];
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	66 0f       	add	r22, r22
     d24:	77 1f       	adc	r23, r23
     d26:	fb 01       	movw	r30, r22
     d28:	e5 56       	subi	r30, 0x65	; 101
     d2a:	fe 4f       	sbci	r31, 0xFE	; 254
     d2c:	80 81       	ld	r24, Z
     d2e:	91 81       	ldd	r25, Z+1	; 0x01
     d30:	08 95       	ret
	}
	else
	{
		return 0x00;
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
	}
     d36:	08 95       	ret

00000d38 <main>:
#include "control_unit.h"

int main(void)
{
	control_unit_reset();
     d38:	0e 94 28 01 	call	0x250	; 0x250 <control_unit_reset>
	
    while (1) 
    {
		control_unit_run();
     d3c:	0e 94 74 01 	call	0x2e8	; 0x2e8 <control_unit_run>
     d40:	fd cf       	rjmp	.-6      	; 0xd3c <main+0x4>

00000d42 <program_memory_write>:


void program_memory_write(void)
{
	static bool program_memory_initialized = false;
	if (program_memory_initialized) return;
     d42:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <program_memory_initialized.1982>
     d46:	81 11       	cpse	r24, r1
     d48:	cf c0       	rjmp	.+414    	; 0xee8 <program_memory_write+0x1a6>

	program_memory[0]  = join(JMP, main, 0x00);
     d4a:	ec e2       	ldi	r30, 0x2C	; 44
     d4c:	f3 e0       	ldi	r31, 0x03	; 3
     d4e:	10 82       	st	Z, r1
     d50:	11 82       	std	Z+1, r1	; 0x01
     d52:	12 82       	std	Z+2, r1	; 0x02
     d54:	13 82       	std	Z+3, r1	; 0x03
     d56:	64 e0       	ldi	r22, 0x04	; 4
     d58:	64 83       	std	Z+4, r22	; 0x04
     d5a:	15 82       	std	Z+5, r1	; 0x05
     d5c:	8d e1       	ldi	r24, 0x1D	; 29
     d5e:	86 83       	std	Z+6, r24	; 0x06
     d60:	17 82       	std	Z+7, r1	; 0x07
	program_memory[1]  = join(NOP, 0x00, 0x00);
     d62:	10 86       	std	Z+8, r1	; 0x08
     d64:	11 86       	std	Z+9, r1	; 0x09
     d66:	12 86       	std	Z+10, r1	; 0x0a
     d68:	13 86       	std	Z+11, r1	; 0x0b
     d6a:	14 86       	std	Z+12, r1	; 0x0c
     d6c:	15 86       	std	Z+13, r1	; 0x0d
     d6e:	16 86       	std	Z+14, r1	; 0x0e
     d70:	17 86       	std	Z+15, r1	; 0x0f
	program_memory[2]  = join(JMP, ISR_PCINT, 0x00);
     d72:	10 8a       	std	Z+16, r1	; 0x10
     d74:	11 8a       	std	Z+17, r1	; 0x11
     d76:	12 8a       	std	Z+18, r1	; 0x12
     d78:	13 8a       	std	Z+19, r1	; 0x13
     d7a:	9f e0       	ldi	r25, 0x0F	; 15
     d7c:	94 8b       	std	Z+20, r25	; 0x14
     d7e:	15 8a       	std	Z+21, r1	; 0x15
     d80:	86 8b       	std	Z+22, r24	; 0x16
     d82:	17 8a       	std	Z+23, r1	; 0x17
	program_memory[3]  = join(NOP, 0x00, 0x00);
     d84:	10 8e       	std	Z+24, r1	; 0x18
     d86:	11 8e       	std	Z+25, r1	; 0x19
     d88:	12 8e       	std	Z+26, r1	; 0x1a
     d8a:	13 8e       	std	Z+27, r1	; 0x1b
     d8c:	14 8e       	std	Z+28, r1	; 0x1c
     d8e:	15 8e       	std	Z+29, r1	; 0x1d
     d90:	16 8e       	std	Z+30, r1	; 0x1e
     d92:	17 8e       	std	Z+31, r1	; 0x1f

	program_memory[4]  = join(CALL, setup, 0x00);
     d94:	10 a2       	std	Z+32, r1	; 0x20
     d96:	11 a2       	std	Z+33, r1	; 0x21
     d98:	12 a2       	std	Z+34, r1	; 0x22
     d9a:	13 a2       	std	Z+35, r1	; 0x23
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	94 a3       	std	Z+36, r25	; 0x24
     da0:	15 a2       	std	Z+37, r1	; 0x25
     da2:	9a e1       	ldi	r25, 0x1A	; 26
     da4:	96 a3       	std	Z+38, r25	; 0x26
     da6:	17 a2       	std	Z+39, r1	; 0x27
	program_memory[5]  = join(JMP, main_loop, 0x00);
     da8:	10 a6       	std	Z+40, r1	; 0x28
     daa:	11 a6       	std	Z+41, r1	; 0x29
     dac:	12 a6       	std	Z+42, r1	; 0x2a
     dae:	13 a6       	std	Z+43, r1	; 0x2b
     db0:	75 e0       	ldi	r23, 0x05	; 5
     db2:	74 a7       	std	Z+44, r23	; 0x2c
     db4:	15 a6       	std	Z+45, r1	; 0x2d
     db6:	86 a7       	std	Z+46, r24	; 0x2e
     db8:	17 a6       	std	Z+47, r1	; 0x2f

	program_memory[6]  = join(LDI, R16, (1 << LED1));
     dba:	10 aa       	std	Z+48, r1	; 0x30
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	81 ab       	std	Z+49, r24	; 0x31
     dc0:	12 aa       	std	Z+50, r1	; 0x32
     dc2:	13 aa       	std	Z+51, r1	; 0x33
     dc4:	30 e1       	ldi	r19, 0x10	; 16
     dc6:	34 ab       	std	Z+52, r19	; 0x34
     dc8:	15 aa       	std	Z+53, r1	; 0x35
     dca:	86 ab       	std	Z+54, r24	; 0x36
     dcc:	17 aa       	std	Z+55, r1	; 0x37
	program_memory[7]  = join(OUT, DDRA, R16);
     dce:	30 af       	std	Z+56, r19	; 0x38
     dd0:	11 ae       	std	Z+57, r1	; 0x39
     dd2:	12 ae       	std	Z+58, r1	; 0x3a
     dd4:	13 ae       	std	Z+59, r1	; 0x3b
     dd6:	14 ae       	std	Z+60, r1	; 0x3c
     dd8:	15 ae       	std	Z+61, r1	; 0x3d
     dda:	93 e0       	ldi	r25, 0x03	; 3
     ddc:	96 af       	std	Z+62, r25	; 0x3e
     dde:	17 ae       	std	Z+63, r1	; 0x3f
	program_memory[8]  = join(LDI, R17, (1 << BUTTON1));
     de0:	ec e6       	ldi	r30, 0x6C	; 108
     de2:	f3 e0       	ldi	r31, 0x03	; 3
     de4:	10 82       	st	Z, r1
     de6:	50 e2       	ldi	r21, 0x20	; 32
     de8:	51 83       	std	Z+1, r21	; 0x01
     dea:	12 82       	std	Z+2, r1	; 0x02
     dec:	13 82       	std	Z+3, r1	; 0x03
     dee:	41 e1       	ldi	r20, 0x11	; 17
     df0:	44 83       	std	Z+4, r20	; 0x04
     df2:	15 82       	std	Z+5, r1	; 0x05
     df4:	86 83       	std	Z+6, r24	; 0x06
     df6:	17 82       	std	Z+7, r1	; 0x07
	program_memory[9]  = join(OUT, PORTA, R17);
     df8:	e4 e7       	ldi	r30, 0x74	; 116
     dfa:	f3 e0       	ldi	r31, 0x03	; 3
     dfc:	40 83       	st	Z, r20
     dfe:	11 82       	std	Z+1, r1	; 0x01
     e00:	12 82       	std	Z+2, r1	; 0x02
     e02:	13 82       	std	Z+3, r1	; 0x03
     e04:	84 83       	std	Z+4, r24	; 0x04
     e06:	15 82       	std	Z+5, r1	; 0x05
     e08:	96 83       	std	Z+6, r25	; 0x06
     e0a:	17 82       	std	Z+7, r1	; 0x07
	program_memory[10] = join(SEI, 0x00, 0x00);
     e0c:	ec e7       	ldi	r30, 0x7C	; 124
     e0e:	f3 e0       	ldi	r31, 0x03	; 3
     e10:	10 82       	st	Z, r1
     e12:	11 82       	std	Z+1, r1	; 0x01
     e14:	12 82       	std	Z+2, r1	; 0x02
     e16:	13 82       	std	Z+3, r1	; 0x03
     e18:	14 82       	std	Z+4, r1	; 0x04
     e1a:	15 82       	std	Z+5, r1	; 0x05
     e1c:	24 e2       	ldi	r18, 0x24	; 36
     e1e:	26 83       	std	Z+6, r18	; 0x06
     e20:	17 82       	std	Z+7, r1	; 0x07
	program_memory[11] = join(LDI, R24, (1 << PCIEA));
     e22:	e4 e8       	ldi	r30, 0x84	; 132
     e24:	f3 e0       	ldi	r31, 0x03	; 3
     e26:	80 83       	st	Z, r24
     e28:	11 82       	std	Z+1, r1	; 0x01
     e2a:	12 82       	std	Z+2, r1	; 0x02
     e2c:	13 82       	std	Z+3, r1	; 0x03
     e2e:	28 e1       	ldi	r18, 0x18	; 24
     e30:	24 83       	std	Z+4, r18	; 0x04
     e32:	15 82       	std	Z+5, r1	; 0x05
     e34:	86 83       	std	Z+6, r24	; 0x06
     e36:	17 82       	std	Z+7, r1	; 0x07
	program_memory[12] = join(OUT, ICR, R24);
     e38:	ec e8       	ldi	r30, 0x8C	; 140
     e3a:	f3 e0       	ldi	r31, 0x03	; 3
     e3c:	20 83       	st	Z, r18
     e3e:	11 82       	std	Z+1, r1	; 0x01
     e40:	12 82       	std	Z+2, r1	; 0x02
     e42:	13 82       	std	Z+3, r1	; 0x03
     e44:	94 83       	std	Z+4, r25	; 0x04
     e46:	15 82       	std	Z+5, r1	; 0x05
     e48:	96 83       	std	Z+6, r25	; 0x06
     e4a:	17 82       	std	Z+7, r1	; 0x07
	program_memory[13] = join(OUT, PCMSK, R17);
     e4c:	e4 e9       	ldi	r30, 0x94	; 148
     e4e:	f3 e0       	ldi	r31, 0x03	; 3
     e50:	40 83       	st	Z, r20
     e52:	11 82       	std	Z+1, r1	; 0x01
     e54:	12 82       	std	Z+2, r1	; 0x02
     e56:	13 82       	std	Z+3, r1	; 0x03
     e58:	74 83       	std	Z+4, r23	; 0x04
     e5a:	15 82       	std	Z+5, r1	; 0x05
     e5c:	96 83       	std	Z+6, r25	; 0x06
     e5e:	17 82       	std	Z+7, r1	; 0x07
	program_memory[14] = join(RET, 0x00, 0x00);
     e60:	ec e9       	ldi	r30, 0x9C	; 156
     e62:	f3 e0       	ldi	r31, 0x03	; 3
     e64:	10 82       	st	Z, r1
     e66:	11 82       	std	Z+1, r1	; 0x01
     e68:	12 82       	std	Z+2, r1	; 0x02
     e6a:	13 82       	std	Z+3, r1	; 0x03
     e6c:	14 82       	std	Z+4, r1	; 0x04
     e6e:	15 82       	std	Z+5, r1	; 0x05
     e70:	4b e1       	ldi	r20, 0x1B	; 27
     e72:	46 83       	std	Z+6, r20	; 0x06
     e74:	17 82       	std	Z+7, r1	; 0x07

	program_memory[15] = join(IN, R24, PINA);
     e76:	e4 ea       	ldi	r30, 0xA4	; 164
     e78:	f3 e0       	ldi	r31, 0x03	; 3
     e7a:	42 e0       	ldi	r20, 0x02	; 2
     e7c:	40 83       	st	Z, r20
     e7e:	11 82       	std	Z+1, r1	; 0x01
     e80:	12 82       	std	Z+2, r1	; 0x02
     e82:	13 82       	std	Z+3, r1	; 0x03
     e84:	24 83       	std	Z+4, r18	; 0x04
     e86:	15 82       	std	Z+5, r1	; 0x05
     e88:	66 83       	std	Z+6, r22	; 0x06
     e8a:	17 82       	std	Z+7, r1	; 0x07
	program_memory[16] = join(ANDI, R24, (1 << BUTTON1));
     e8c:	ec ea       	ldi	r30, 0xAC	; 172
     e8e:	f3 e0       	ldi	r31, 0x03	; 3
     e90:	10 82       	st	Z, r1
     e92:	51 83       	std	Z+1, r21	; 0x01
     e94:	12 82       	std	Z+2, r1	; 0x02
     e96:	13 82       	std	Z+3, r1	; 0x03
     e98:	24 83       	std	Z+4, r18	; 0x04
     e9a:	15 82       	std	Z+5, r1	; 0x05
     e9c:	2b e0       	ldi	r18, 0x0B	; 11
     e9e:	26 83       	std	Z+6, r18	; 0x06
     ea0:	17 82       	std	Z+7, r1	; 0x07
	program_memory[17] = join(JE, ISR_PCINT_end, 0x00);
     ea2:	e4 eb       	ldi	r30, 0xB4	; 180
     ea4:	f3 e0       	ldi	r31, 0x03	; 3
     ea6:	10 82       	st	Z, r1
     ea8:	11 82       	std	Z+1, r1	; 0x01
     eaa:	12 82       	std	Z+2, r1	; 0x02
     eac:	13 82       	std	Z+3, r1	; 0x03
     eae:	23 e1       	ldi	r18, 0x13	; 19
     eb0:	24 83       	std	Z+4, r18	; 0x04
     eb2:	15 82       	std	Z+5, r1	; 0x05
     eb4:	2e e1       	ldi	r18, 0x1E	; 30
     eb6:	26 83       	std	Z+6, r18	; 0x06
     eb8:	17 82       	std	Z+7, r1	; 0x07
	program_memory[18] = join(OUT, PINA, R16);
     eba:	ec eb       	ldi	r30, 0xBC	; 188
     ebc:	f3 e0       	ldi	r31, 0x03	; 3
     ebe:	30 83       	st	Z, r19
     ec0:	11 82       	std	Z+1, r1	; 0x01
     ec2:	12 82       	std	Z+2, r1	; 0x02
     ec4:	13 82       	std	Z+3, r1	; 0x03
     ec6:	44 83       	std	Z+4, r20	; 0x04
     ec8:	15 82       	std	Z+5, r1	; 0x05
     eca:	96 83       	std	Z+6, r25	; 0x06
     ecc:	17 82       	std	Z+7, r1	; 0x07
	program_memory[19] = join(RETI, 0x00, 0x00);
     ece:	e4 ec       	ldi	r30, 0xC4	; 196
     ed0:	f3 e0       	ldi	r31, 0x03	; 3
     ed2:	10 82       	st	Z, r1
     ed4:	11 82       	std	Z+1, r1	; 0x01
     ed6:	12 82       	std	Z+2, r1	; 0x02
     ed8:	13 82       	std	Z+3, r1	; 0x03
     eda:	14 82       	std	Z+4, r1	; 0x04
     edc:	15 82       	std	Z+5, r1	; 0x05
     ede:	9c e1       	ldi	r25, 0x1C	; 28
     ee0:	96 83       	std	Z+6, r25	; 0x06
     ee2:	17 82       	std	Z+7, r1	; 0x07

	program_memory_initialized = true;
     ee4:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <program_memory_initialized.1982>
     ee8:	08 95       	ret

00000eea <program_memory_read>:
	return;
}

uint64_t program_memory_read(const uint16_t address)
{
	if (address < PROGRAM_MEMORY_ADDRESS_WIDTH)
     eea:	89 31       	cpi	r24, 0x19	; 25
     eec:	91 05       	cpc	r25, r1
     eee:	90 f4       	brcc	.+36     	; 0xf14 <program_memory_read+0x2a>
	{
		return program_memory[address];
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	fc 01       	movw	r30, r24
     efe:	e4 5d       	subi	r30, 0xD4	; 212
     f00:	fc 4f       	sbci	r31, 0xFC	; 252
     f02:	20 81       	ld	r18, Z
     f04:	31 81       	ldd	r19, Z+1	; 0x01
     f06:	42 81       	ldd	r20, Z+2	; 0x02
     f08:	53 81       	ldd	r21, Z+3	; 0x03
     f0a:	64 81       	ldd	r22, Z+4	; 0x04
     f0c:	75 81       	ldd	r23, Z+5	; 0x05
     f0e:	86 81       	ldd	r24, Z+6	; 0x06
     f10:	97 81       	ldd	r25, Z+7	; 0x07
     f12:	08 95       	ret
	}
	else
	{
		return 0x00;
     f14:	20 e0       	ldi	r18, 0x00	; 0
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	40 e0       	ldi	r20, 0x00	; 0
     f1a:	50 e0       	ldi	r21, 0x00	; 0
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     f24:	08 95       	ret

00000f26 <stack_reset>:
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
	for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0c c0       	rjmp	.+24     	; 0xf44 <stack_reset+0x1e>
	{
		stack[i] = 0x00;
     f2c:	fc 01       	movw	r30, r24
     f2e:	ee 0f       	add	r30, r30
     f30:	ff 1f       	adc	r31, r31
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e9 50       	subi	r30, 0x09	; 9
     f38:	fc 4f       	sbci	r31, 0xFC	; 252
     f3a:	10 82       	st	Z, r1
     f3c:	11 82       	std	Z+1, r1	; 0x01
     f3e:	12 82       	std	Z+2, r1	; 0x02
     f40:	13 82       	std	Z+3, r1	; 0x03
* stack_reset: Clears content on the entire stack and sets the stack pointer
*              to the top of the stack.
********************************************************************************/
void stack_reset(void)
{
	for (uint16_t i = 0; i < STACK_ADDRESS_WIDTH; ++i)
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	84 36       	cpi	r24, 0x64	; 100
     f46:	91 05       	cpc	r25, r1
     f48:	88 f3       	brcs	.-30     	; 0xf2c <stack_reset+0x6>
	{
		stack[i] = 0x00;
	}

	sp = STACK_ADDRESS_WIDTH - 1;
     f4a:	83 e6       	ldi	r24, 0x63	; 99
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	90 93 f6 03 	sts	0x03F6, r25	; 0x8003f6 <sp+0x1>
     f52:	80 93 f5 03 	sts	0x03F5, r24	; 0x8003f5 <sp>
	stack_empty = true;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	80 93 f4 03 	sts	0x03F4, r24	; 0x8003f4 <stack_empty>
     f5c:	08 95       	ret

00000f5e <stack_push>:
*
*             - value: 8 bit value to push to the stack.
********************************************************************************/
int stack_push(const uint32_t value)
{
	if (sp == 0)
     f5e:	40 91 f5 03 	lds	r20, 0x03F5	; 0x8003f5 <sp>
     f62:	50 91 f6 03 	lds	r21, 0x03F6	; 0x8003f6 <sp+0x1>
     f66:	41 15       	cp	r20, r1
     f68:	51 05       	cpc	r21, r1
     f6a:	51 f1       	breq	.+84     	; 0xfc0 <stack_push+0x62>
	{
		return 1;
	}
	else
	{
		if (stack_empty)
     f6c:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <stack_empty>
     f70:	22 23       	and	r18, r18
     f72:	89 f0       	breq	.+34     	; 0xf96 <stack_push+0x38>
		{
			stack[sp] = value;
     f74:	9a 01       	movw	r18, r20
     f76:	22 0f       	add	r18, r18
     f78:	33 1f       	adc	r19, r19
     f7a:	22 0f       	add	r18, r18
     f7c:	33 1f       	adc	r19, r19
     f7e:	f9 01       	movw	r30, r18
     f80:	e9 50       	subi	r30, 0x09	; 9
     f82:	fc 4f       	sbci	r31, 0xFC	; 252
     f84:	60 83       	st	Z, r22
     f86:	71 83       	std	Z+1, r23	; 0x01
     f88:	82 83       	std	Z+2, r24	; 0x02
     f8a:	93 83       	std	Z+3, r25	; 0x03
			stack_empty = false;
     f8c:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <stack_empty>
		}
		else
		{
			stack[--sp] = value;
		}
		return 0;
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	08 95       	ret
			stack[sp] = value;
			stack_empty = false;
		}
		else
		{
			stack[--sp] = value;
     f96:	9a 01       	movw	r18, r20
     f98:	21 50       	subi	r18, 0x01	; 1
     f9a:	31 09       	sbc	r19, r1
     f9c:	30 93 f6 03 	sts	0x03F6, r19	; 0x8003f6 <sp+0x1>
     fa0:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <sp>
     fa4:	22 0f       	add	r18, r18
     fa6:	33 1f       	adc	r19, r19
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	f9 01       	movw	r30, r18
     fae:	e9 50       	subi	r30, 0x09	; 9
     fb0:	fc 4f       	sbci	r31, 0xFC	; 252
     fb2:	60 83       	st	Z, r22
     fb4:	71 83       	std	Z+1, r23	; 0x01
     fb6:	82 83       	std	Z+2, r24	; 0x02
     fb8:	93 83       	std	Z+3, r25	; 0x03
		}
		return 0;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	08 95       	ret
********************************************************************************/
int stack_push(const uint32_t value)
{
	if (sp == 0)
	{
		return 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
		{
			stack[--sp] = value;
		}
		return 0;
	}
}
     fc4:	08 95       	ret

00000fc6 <stack_pop>:
* stack_pop: Returns 8 bit value popped from the stack. If the stack is empty,
*            the value 0x00 is returned.
********************************************************************************/
uint32_t stack_pop(void)
{
	if (stack_empty)
     fc6:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <stack_empty>
     fca:	81 11       	cpse	r24, r1
     fcc:	29 c0       	rjmp	.+82     	; 0x1020 <stack_pop+0x5a>
	{
		return 0x00;
	}
	else
	{
		if (sp < STACK_ADDRESS_WIDTH - 1)
     fce:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <sp>
     fd2:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <sp+0x1>
     fd6:	83 36       	cpi	r24, 0x63	; 99
     fd8:	91 05       	cpc	r25, r1
     fda:	98 f4       	brcc	.+38     	; 0x1002 <stack_pop+0x3c>
		{
			return stack[sp++];
     fdc:	9c 01       	movw	r18, r24
     fde:	2f 5f       	subi	r18, 0xFF	; 255
     fe0:	3f 4f       	sbci	r19, 0xFF	; 255
     fe2:	30 93 f6 03 	sts	0x03F6, r19	; 0x8003f6 <sp+0x1>
     fe6:	20 93 f5 03 	sts	0x03F5, r18	; 0x8003f5 <sp>
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	fc 01       	movw	r30, r24
     ff4:	e9 50       	subi	r30, 0x09	; 9
     ff6:	fc 4f       	sbci	r31, 0xFC	; 252
     ff8:	60 81       	ld	r22, Z
     ffa:	71 81       	ldd	r23, Z+1	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	08 95       	ret
		}
		else
		{
			stack_empty = true;
    1002:	21 e0       	ldi	r18, 0x01	; 1
    1004:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <stack_empty>
			return stack[sp];
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	fc 01       	movw	r30, r24
    1012:	e9 50       	subi	r30, 0x09	; 9
    1014:	fc 4f       	sbci	r31, 0xFC	; 252
    1016:	60 81       	ld	r22, Z
    1018:	71 81       	ldd	r23, Z+1	; 0x01
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	08 95       	ret
********************************************************************************/
uint32_t stack_pop(void)
{
	if (stack_empty)
	{
		return 0x00;
    1020:	60 e0       	ldi	r22, 0x00	; 0
    1022:	70 e0       	ldi	r23, 0x00	; 0
    1024:	cb 01       	movw	r24, r22
		{
			stack_empty = true;
			return stack[sp];
		}
	}
}
    1026:	08 95       	ret

00001028 <__subsf3>:
    1028:	50 58       	subi	r21, 0x80	; 128

0000102a <__addsf3>:
    102a:	bb 27       	eor	r27, r27
    102c:	aa 27       	eor	r26, r26
    102e:	0e 94 2c 08 	call	0x1058	; 0x1058 <__addsf3x>
    1032:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__fp_round>
    1036:	0e 94 13 09 	call	0x1226	; 0x1226 <__fp_pscA>
    103a:	38 f0       	brcs	.+14     	; 0x104a <__addsf3+0x20>
    103c:	0e 94 1a 09 	call	0x1234	; 0x1234 <__fp_pscB>
    1040:	20 f0       	brcs	.+8      	; 0x104a <__addsf3+0x20>
    1042:	39 f4       	brne	.+14     	; 0x1052 <__addsf3+0x28>
    1044:	9f 3f       	cpi	r25, 0xFF	; 255
    1046:	19 f4       	brne	.+6      	; 0x104e <__addsf3+0x24>
    1048:	26 f4       	brtc	.+8      	; 0x1052 <__addsf3+0x28>
    104a:	0c 94 00 09 	jmp	0x1200	; 0x1200 <__fp_nan>
    104e:	0e f4       	brtc	.+2      	; 0x1052 <__addsf3+0x28>
    1050:	e0 95       	com	r30
    1052:	e7 fb       	bst	r30, 7
    1054:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__fp_inf>

00001058 <__addsf3x>:
    1058:	e9 2f       	mov	r30, r25
    105a:	0e 94 32 09 	call	0x1264	; 0x1264 <__fp_split3>
    105e:	58 f3       	brcs	.-42     	; 0x1036 <__addsf3+0xc>
    1060:	ba 17       	cp	r27, r26
    1062:	62 07       	cpc	r22, r18
    1064:	73 07       	cpc	r23, r19
    1066:	84 07       	cpc	r24, r20
    1068:	95 07       	cpc	r25, r21
    106a:	20 f0       	brcs	.+8      	; 0x1074 <__addsf3x+0x1c>
    106c:	79 f4       	brne	.+30     	; 0x108c <__addsf3x+0x34>
    106e:	a6 f5       	brtc	.+104    	; 0x10d8 <__addsf3x+0x80>
    1070:	0c 94 54 09 	jmp	0x12a8	; 0x12a8 <__fp_zero>
    1074:	0e f4       	brtc	.+2      	; 0x1078 <__addsf3x+0x20>
    1076:	e0 95       	com	r30
    1078:	0b 2e       	mov	r0, r27
    107a:	ba 2f       	mov	r27, r26
    107c:	a0 2d       	mov	r26, r0
    107e:	0b 01       	movw	r0, r22
    1080:	b9 01       	movw	r22, r18
    1082:	90 01       	movw	r18, r0
    1084:	0c 01       	movw	r0, r24
    1086:	ca 01       	movw	r24, r20
    1088:	a0 01       	movw	r20, r0
    108a:	11 24       	eor	r1, r1
    108c:	ff 27       	eor	r31, r31
    108e:	59 1b       	sub	r21, r25
    1090:	99 f0       	breq	.+38     	; 0x10b8 <__addsf3x+0x60>
    1092:	59 3f       	cpi	r21, 0xF9	; 249
    1094:	50 f4       	brcc	.+20     	; 0x10aa <__addsf3x+0x52>
    1096:	50 3e       	cpi	r21, 0xE0	; 224
    1098:	68 f1       	brcs	.+90     	; 0x10f4 <__addsf3x+0x9c>
    109a:	1a 16       	cp	r1, r26
    109c:	f0 40       	sbci	r31, 0x00	; 0
    109e:	a2 2f       	mov	r26, r18
    10a0:	23 2f       	mov	r18, r19
    10a2:	34 2f       	mov	r19, r20
    10a4:	44 27       	eor	r20, r20
    10a6:	58 5f       	subi	r21, 0xF8	; 248
    10a8:	f3 cf       	rjmp	.-26     	; 0x1090 <__addsf3x+0x38>
    10aa:	46 95       	lsr	r20
    10ac:	37 95       	ror	r19
    10ae:	27 95       	ror	r18
    10b0:	a7 95       	ror	r26
    10b2:	f0 40       	sbci	r31, 0x00	; 0
    10b4:	53 95       	inc	r21
    10b6:	c9 f7       	brne	.-14     	; 0x10aa <__addsf3x+0x52>
    10b8:	7e f4       	brtc	.+30     	; 0x10d8 <__addsf3x+0x80>
    10ba:	1f 16       	cp	r1, r31
    10bc:	ba 0b       	sbc	r27, r26
    10be:	62 0b       	sbc	r22, r18
    10c0:	73 0b       	sbc	r23, r19
    10c2:	84 0b       	sbc	r24, r20
    10c4:	ba f0       	brmi	.+46     	; 0x10f4 <__addsf3x+0x9c>
    10c6:	91 50       	subi	r25, 0x01	; 1
    10c8:	a1 f0       	breq	.+40     	; 0x10f2 <__addsf3x+0x9a>
    10ca:	ff 0f       	add	r31, r31
    10cc:	bb 1f       	adc	r27, r27
    10ce:	66 1f       	adc	r22, r22
    10d0:	77 1f       	adc	r23, r23
    10d2:	88 1f       	adc	r24, r24
    10d4:	c2 f7       	brpl	.-16     	; 0x10c6 <__addsf3x+0x6e>
    10d6:	0e c0       	rjmp	.+28     	; 0x10f4 <__addsf3x+0x9c>
    10d8:	ba 0f       	add	r27, r26
    10da:	62 1f       	adc	r22, r18
    10dc:	73 1f       	adc	r23, r19
    10de:	84 1f       	adc	r24, r20
    10e0:	48 f4       	brcc	.+18     	; 0x10f4 <__addsf3x+0x9c>
    10e2:	87 95       	ror	r24
    10e4:	77 95       	ror	r23
    10e6:	67 95       	ror	r22
    10e8:	b7 95       	ror	r27
    10ea:	f7 95       	ror	r31
    10ec:	9e 3f       	cpi	r25, 0xFE	; 254
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <__addsf3x+0x9a>
    10f0:	b0 cf       	rjmp	.-160    	; 0x1052 <__addsf3+0x28>
    10f2:	93 95       	inc	r25
    10f4:	88 0f       	add	r24, r24
    10f6:	08 f0       	brcs	.+2      	; 0x10fa <__addsf3x+0xa2>
    10f8:	99 27       	eor	r25, r25
    10fa:	ee 0f       	add	r30, r30
    10fc:	97 95       	ror	r25
    10fe:	87 95       	ror	r24
    1100:	08 95       	ret

00001102 <__fixsfdi>:
    1102:	be e3       	ldi	r27, 0x3E	; 62
    1104:	04 d0       	rcall	.+8      	; 0x110e <__fixunssfdi+0x2>
    1106:	08 f4       	brcc	.+2      	; 0x110a <__fixsfdi+0x8>
    1108:	90 e8       	ldi	r25, 0x80	; 128
    110a:	08 95       	ret

0000110c <__fixunssfdi>:
    110c:	bf e3       	ldi	r27, 0x3F	; 63
    110e:	22 27       	eor	r18, r18
    1110:	33 27       	eor	r19, r19
    1112:	a9 01       	movw	r20, r18
    1114:	0e 94 3a 09 	call	0x1274	; 0x1274 <__fp_splitA>
    1118:	60 f1       	brcs	.+88     	; 0x1172 <__fixunssfdi+0x66>
    111a:	9f 57       	subi	r25, 0x7F	; 127
    111c:	48 f1       	brcs	.+82     	; 0x1170 <__fixunssfdi+0x64>
    111e:	b9 17       	cp	r27, r25
    1120:	40 f1       	brcs	.+80     	; 0x1172 <__fixunssfdi+0x66>
    1122:	bf e3       	ldi	r27, 0x3F	; 63
    1124:	b9 1b       	sub	r27, r25
    1126:	99 27       	eor	r25, r25
    1128:	b8 50       	subi	r27, 0x08	; 8
    112a:	3a f4       	brpl	.+14     	; 0x113a <__fixunssfdi+0x2e>
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	b3 95       	inc	r27
    1136:	d2 f3       	brmi	.-12     	; 0x112c <__fixunssfdi+0x20>
    1138:	16 c0       	rjmp	.+44     	; 0x1166 <__fixunssfdi+0x5a>
    113a:	b8 50       	subi	r27, 0x08	; 8
    113c:	4a f0       	brmi	.+18     	; 0x1150 <__fixunssfdi+0x44>
    113e:	23 2f       	mov	r18, r19
    1140:	34 2f       	mov	r19, r20
    1142:	45 2f       	mov	r20, r21
    1144:	56 2f       	mov	r21, r22
    1146:	67 2f       	mov	r22, r23
    1148:	78 2f       	mov	r23, r24
    114a:	88 27       	eor	r24, r24
    114c:	b8 50       	subi	r27, 0x08	; 8
    114e:	ba f7       	brpl	.-18     	; 0x113e <__fixunssfdi+0x32>
    1150:	b8 5f       	subi	r27, 0xF8	; 248
    1152:	49 f0       	breq	.+18     	; 0x1166 <__fixunssfdi+0x5a>
    1154:	86 95       	lsr	r24
    1156:	77 95       	ror	r23
    1158:	67 95       	ror	r22
    115a:	57 95       	ror	r21
    115c:	47 95       	ror	r20
    115e:	37 95       	ror	r19
    1160:	27 95       	ror	r18
    1162:	ba 95       	dec	r27
    1164:	b9 f7       	brne	.-18     	; 0x1154 <__fixunssfdi+0x48>
    1166:	16 f4       	brtc	.+4      	; 0x116c <__fixunssfdi+0x60>
    1168:	0e 94 03 09 	call	0x1206	; 0x1206 <__fp_negdi>
    116c:	88 94       	clc
    116e:	08 95       	ret
    1170:	88 94       	clc
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	70 e0       	ldi	r23, 0x00	; 0
    1176:	cb 01       	movw	r24, r22
    1178:	08 95       	ret

0000117a <__floatunsisf>:
    117a:	e8 94       	clt
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <__floatsisf+0x12>

0000117e <__floatsisf>:
    117e:	97 fb       	bst	r25, 7
    1180:	3e f4       	brtc	.+14     	; 0x1190 <__floatsisf+0x12>
    1182:	90 95       	com	r25
    1184:	80 95       	com	r24
    1186:	70 95       	com	r23
    1188:	61 95       	neg	r22
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	8f 4f       	sbci	r24, 0xFF	; 255
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	99 23       	and	r25, r25
    1192:	a9 f0       	breq	.+42     	; 0x11be <__floatsisf+0x40>
    1194:	f9 2f       	mov	r31, r25
    1196:	96 e9       	ldi	r25, 0x96	; 150
    1198:	bb 27       	eor	r27, r27
    119a:	93 95       	inc	r25
    119c:	f6 95       	lsr	r31
    119e:	87 95       	ror	r24
    11a0:	77 95       	ror	r23
    11a2:	67 95       	ror	r22
    11a4:	b7 95       	ror	r27
    11a6:	f1 11       	cpse	r31, r1
    11a8:	f8 cf       	rjmp	.-16     	; 0x119a <__floatsisf+0x1c>
    11aa:	fa f4       	brpl	.+62     	; 0x11ea <__floatsisf+0x6c>
    11ac:	bb 0f       	add	r27, r27
    11ae:	11 f4       	brne	.+4      	; 0x11b4 <__floatsisf+0x36>
    11b0:	60 ff       	sbrs	r22, 0
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <__floatsisf+0x6c>
    11b4:	6f 5f       	subi	r22, 0xFF	; 255
    11b6:	7f 4f       	sbci	r23, 0xFF	; 255
    11b8:	8f 4f       	sbci	r24, 0xFF	; 255
    11ba:	9f 4f       	sbci	r25, 0xFF	; 255
    11bc:	16 c0       	rjmp	.+44     	; 0x11ea <__floatsisf+0x6c>
    11be:	88 23       	and	r24, r24
    11c0:	11 f0       	breq	.+4      	; 0x11c6 <__floatsisf+0x48>
    11c2:	96 e9       	ldi	r25, 0x96	; 150
    11c4:	11 c0       	rjmp	.+34     	; 0x11e8 <__floatsisf+0x6a>
    11c6:	77 23       	and	r23, r23
    11c8:	21 f0       	breq	.+8      	; 0x11d2 <__floatsisf+0x54>
    11ca:	9e e8       	ldi	r25, 0x8E	; 142
    11cc:	87 2f       	mov	r24, r23
    11ce:	76 2f       	mov	r23, r22
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <__floatsisf+0x5e>
    11d2:	66 23       	and	r22, r22
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <__floatsisf+0x74>
    11d6:	96 e8       	ldi	r25, 0x86	; 134
    11d8:	86 2f       	mov	r24, r22
    11da:	70 e0       	ldi	r23, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	2a f0       	brmi	.+10     	; 0x11ea <__floatsisf+0x6c>
    11e0:	9a 95       	dec	r25
    11e2:	66 0f       	add	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	88 1f       	adc	r24, r24
    11e8:	da f7       	brpl	.-10     	; 0x11e0 <__floatsisf+0x62>
    11ea:	88 0f       	add	r24, r24
    11ec:	96 95       	lsr	r25
    11ee:	87 95       	ror	r24
    11f0:	97 f9       	bld	r25, 7
    11f2:	08 95       	ret

000011f4 <__fp_inf>:
    11f4:	97 f9       	bld	r25, 7
    11f6:	9f 67       	ori	r25, 0x7F	; 127
    11f8:	80 e8       	ldi	r24, 0x80	; 128
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	08 95       	ret

00001200 <__fp_nan>:
    1200:	9f ef       	ldi	r25, 0xFF	; 255
    1202:	80 ec       	ldi	r24, 0xC0	; 192
    1204:	08 95       	ret

00001206 <__fp_negdi>:
    1206:	90 95       	com	r25
    1208:	80 95       	com	r24
    120a:	70 95       	com	r23
    120c:	60 95       	com	r22
    120e:	50 95       	com	r21
    1210:	40 95       	com	r20
    1212:	30 95       	com	r19
    1214:	21 95       	neg	r18
    1216:	3f 4f       	sbci	r19, 0xFF	; 255
    1218:	4f 4f       	sbci	r20, 0xFF	; 255
    121a:	5f 4f       	sbci	r21, 0xFF	; 255
    121c:	6f 4f       	sbci	r22, 0xFF	; 255
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	08 95       	ret

00001226 <__fp_pscA>:
    1226:	00 24       	eor	r0, r0
    1228:	0a 94       	dec	r0
    122a:	16 16       	cp	r1, r22
    122c:	17 06       	cpc	r1, r23
    122e:	18 06       	cpc	r1, r24
    1230:	09 06       	cpc	r0, r25
    1232:	08 95       	ret

00001234 <__fp_pscB>:
    1234:	00 24       	eor	r0, r0
    1236:	0a 94       	dec	r0
    1238:	12 16       	cp	r1, r18
    123a:	13 06       	cpc	r1, r19
    123c:	14 06       	cpc	r1, r20
    123e:	05 06       	cpc	r0, r21
    1240:	08 95       	ret

00001242 <__fp_round>:
    1242:	09 2e       	mov	r0, r25
    1244:	03 94       	inc	r0
    1246:	00 0c       	add	r0, r0
    1248:	11 f4       	brne	.+4      	; 0x124e <__fp_round+0xc>
    124a:	88 23       	and	r24, r24
    124c:	52 f0       	brmi	.+20     	; 0x1262 <__fp_round+0x20>
    124e:	bb 0f       	add	r27, r27
    1250:	40 f4       	brcc	.+16     	; 0x1262 <__fp_round+0x20>
    1252:	bf 2b       	or	r27, r31
    1254:	11 f4       	brne	.+4      	; 0x125a <__fp_round+0x18>
    1256:	60 ff       	sbrs	r22, 0
    1258:	04 c0       	rjmp	.+8      	; 0x1262 <__fp_round+0x20>
    125a:	6f 5f       	subi	r22, 0xFF	; 255
    125c:	7f 4f       	sbci	r23, 0xFF	; 255
    125e:	8f 4f       	sbci	r24, 0xFF	; 255
    1260:	9f 4f       	sbci	r25, 0xFF	; 255
    1262:	08 95       	ret

00001264 <__fp_split3>:
    1264:	57 fd       	sbrc	r21, 7
    1266:	90 58       	subi	r25, 0x80	; 128
    1268:	44 0f       	add	r20, r20
    126a:	55 1f       	adc	r21, r21
    126c:	59 f0       	breq	.+22     	; 0x1284 <__fp_splitA+0x10>
    126e:	5f 3f       	cpi	r21, 0xFF	; 255
    1270:	71 f0       	breq	.+28     	; 0x128e <__fp_splitA+0x1a>
    1272:	47 95       	ror	r20

00001274 <__fp_splitA>:
    1274:	88 0f       	add	r24, r24
    1276:	97 fb       	bst	r25, 7
    1278:	99 1f       	adc	r25, r25
    127a:	61 f0       	breq	.+24     	; 0x1294 <__fp_splitA+0x20>
    127c:	9f 3f       	cpi	r25, 0xFF	; 255
    127e:	79 f0       	breq	.+30     	; 0x129e <__fp_splitA+0x2a>
    1280:	87 95       	ror	r24
    1282:	08 95       	ret
    1284:	12 16       	cp	r1, r18
    1286:	13 06       	cpc	r1, r19
    1288:	14 06       	cpc	r1, r20
    128a:	55 1f       	adc	r21, r21
    128c:	f2 cf       	rjmp	.-28     	; 0x1272 <__fp_split3+0xe>
    128e:	46 95       	lsr	r20
    1290:	f1 df       	rcall	.-30     	; 0x1274 <__fp_splitA>
    1292:	08 c0       	rjmp	.+16     	; 0x12a4 <__fp_splitA+0x30>
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	18 06       	cpc	r1, r24
    129a:	99 1f       	adc	r25, r25
    129c:	f1 cf       	rjmp	.-30     	; 0x1280 <__fp_splitA+0xc>
    129e:	86 95       	lsr	r24
    12a0:	71 05       	cpc	r23, r1
    12a2:	61 05       	cpc	r22, r1
    12a4:	08 94       	sec
    12a6:	08 95       	ret

000012a8 <__fp_zero>:
    12a8:	e8 94       	clt

000012aa <__fp_szero>:
    12aa:	bb 27       	eor	r27, r27
    12ac:	66 27       	eor	r22, r22
    12ae:	77 27       	eor	r23, r23
    12b0:	cb 01       	movw	r24, r22
    12b2:	97 f9       	bld	r25, 7
    12b4:	08 95       	ret

000012b6 <__tablejump2__>:
    12b6:	ee 0f       	add	r30, r30
    12b8:	ff 1f       	adc	r31, r31
    12ba:	05 90       	lpm	r0, Z+
    12bc:	f4 91       	lpm	r31, Z
    12be:	e0 2d       	mov	r30, r0
    12c0:	09 94       	ijmp

000012c2 <__ashrdi3>:
    12c2:	97 fb       	bst	r25, 7
    12c4:	10 f8       	bld	r1, 0

000012c6 <__lshrdi3>:
    12c6:	16 94       	lsr	r1
    12c8:	00 08       	sbc	r0, r0
    12ca:	0f 93       	push	r16
    12cc:	08 30       	cpi	r16, 0x08	; 8
    12ce:	98 f0       	brcs	.+38     	; 0x12f6 <__lshrdi3+0x30>
    12d0:	08 50       	subi	r16, 0x08	; 8
    12d2:	23 2f       	mov	r18, r19
    12d4:	34 2f       	mov	r19, r20
    12d6:	45 2f       	mov	r20, r21
    12d8:	56 2f       	mov	r21, r22
    12da:	67 2f       	mov	r22, r23
    12dc:	78 2f       	mov	r23, r24
    12de:	89 2f       	mov	r24, r25
    12e0:	90 2d       	mov	r25, r0
    12e2:	f4 cf       	rjmp	.-24     	; 0x12cc <__lshrdi3+0x6>
    12e4:	05 94       	asr	r0
    12e6:	97 95       	ror	r25
    12e8:	87 95       	ror	r24
    12ea:	77 95       	ror	r23
    12ec:	67 95       	ror	r22
    12ee:	57 95       	ror	r21
    12f0:	47 95       	ror	r20
    12f2:	37 95       	ror	r19
    12f4:	27 95       	ror	r18
    12f6:	0a 95       	dec	r16
    12f8:	aa f7       	brpl	.-22     	; 0x12e4 <__lshrdi3+0x1e>
    12fa:	0f 91       	pop	r16
    12fc:	08 95       	ret

000012fe <_exit>:
    12fe:	f8 94       	cli

00001300 <__stop_program>:
    1300:	ff cf       	rjmp	.-2      	; 0x1300 <__stop_program>
